Search.setIndex({docurls:["context.html","driver/array/index.html","driver/cast/index.html","driver/downsample/index.html","driver/image/avif/index.html","driver/image/jpeg/index.html","driver/image/png/index.html","driver/index.html","driver/json/index.html","driver/n5/index.html","driver/neuroglancer_precomputed/index.html","driver/stack/index.html","driver/zarr/index.html","environment.html","index.html","index_space.html","installation.html","kvstore/file/index.html","kvstore/gcs/index.html","kvstore/http/index.html","kvstore/index.html","kvstore/memory/index.html","python/api/index.html","python/api/tensorstore.ChunkLayout.html","python/api/tensorstore.ChunkLayout.Grid.html","python/api/tensorstore.ChunkLayout.Grid.__eq__.html","python/api/tensorstore.ChunkLayout.Grid.__init__-components.html","python/api/tensorstore.ChunkLayout.Grid.__init__-json.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio.html","python/api/tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.elements.html","python/api/tensorstore.ChunkLayout.Grid.elements_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.ndim.html","python/api/tensorstore.ChunkLayout.Grid.rank.html","python/api/tensorstore.ChunkLayout.Grid.shape.html","python/api/tensorstore.ChunkLayout.Grid.shape_soft_constraint.html","python/api/tensorstore.ChunkLayout.Grid.to_json.html","python/api/tensorstore.ChunkLayout.Grid.update.html","python/api/tensorstore.ChunkLayout.__eq__.html","python/api/tensorstore.ChunkLayout.__init__-components.html","python/api/tensorstore.ChunkLayout.__init__-json.html","python/api/tensorstore.ChunkLayout.codec_chunk.html","python/api/tensorstore.ChunkLayout.grid_origin.html","python/api/tensorstore.ChunkLayout.grid_origin_soft_constraint.html","python/api/tensorstore.ChunkLayout.inner_order.html","python/api/tensorstore.ChunkLayout.inner_order_soft_constraint.html","python/api/tensorstore.ChunkLayout.ndim.html","python/api/tensorstore.ChunkLayout.rank.html","python/api/tensorstore.ChunkLayout.read_chunk.html","python/api/tensorstore.ChunkLayout.read_chunk_template.html","python/api/tensorstore.ChunkLayout.to_json.html","python/api/tensorstore.ChunkLayout.update.html","python/api/tensorstore.ChunkLayout.write_chunk.html","python/api/tensorstore.ChunkLayout.write_chunk_template.html","python/api/tensorstore.CodecSpec.html","python/api/tensorstore.CodecSpec.__init__.html","python/api/tensorstore.CodecSpec.to_json.html","python/api/tensorstore.Context.html","python/api/tensorstore.Context.Resource.html","python/api/tensorstore.Context.Resource.to_json.html","python/api/tensorstore.Context.Spec.html","python/api/tensorstore.Context.Spec.__init__.html","python/api/tensorstore.Context.Spec.to_json.html","python/api/tensorstore.Context.__getitem__.html","python/api/tensorstore.Context.__init__-default.html","python/api/tensorstore.Context.__init__-json.html","python/api/tensorstore.Context.__init__-spec.html","python/api/tensorstore.Context.parent.html","python/api/tensorstore.Context.spec.html","python/api/tensorstore.Dim.html","python/api/tensorstore.Dim.__contains__-dim.html","python/api/tensorstore.Dim.__contains__-index.html","python/api/tensorstore.Dim.__eq__.html","python/api/tensorstore.Dim.__init__-exclusive_max.html","python/api/tensorstore.Dim.__init__-inclusive_max.html","python/api/tensorstore.Dim.__init__-size.html","python/api/tensorstore.Dim.__init__-unbounded.html","python/api/tensorstore.Dim.__iter__.html","python/api/tensorstore.Dim.__len__.html","python/api/tensorstore.Dim.__repr__.html","python/api/tensorstore.Dim.__str__.html","python/api/tensorstore.Dim.empty.html","python/api/tensorstore.Dim.exclusive_max.html","python/api/tensorstore.Dim.exclusive_min.html","python/api/tensorstore.Dim.finite.html","python/api/tensorstore.Dim.hull.html","python/api/tensorstore.Dim.implicit_lower.html","python/api/tensorstore.Dim.implicit_upper.html","python/api/tensorstore.Dim.inclusive_max.html","python/api/tensorstore.Dim.inclusive_min.html","python/api/tensorstore.Dim.intersect.html","python/api/tensorstore.Dim.label.html","python/api/tensorstore.Dim.size.html","python/api/tensorstore.DimExpression.html","python/api/tensorstore.DimExpression.__getitem__.html","python/api/tensorstore.DimExpression.diagonal.html","python/api/tensorstore.DimExpression.label.html","python/api/tensorstore.DimExpression.oindex.html","python/api/tensorstore.DimExpression.stride.html","python/api/tensorstore.DimExpression.translate_backward_by.html","python/api/tensorstore.DimExpression.translate_by.html","python/api/tensorstore.DimExpression.translate_to.html","python/api/tensorstore.DimExpression.transpose.html","python/api/tensorstore.DimExpression.vindex.html","python/api/tensorstore.Future.html","python/api/tensorstore.Future.__new__.html","python/api/tensorstore.Future.add_done_callback.html","python/api/tensorstore.Future.cancel.html","python/api/tensorstore.Future.cancelled.html","python/api/tensorstore.Future.done.html","python/api/tensorstore.Future.exception.html","python/api/tensorstore.Future.force.html","python/api/tensorstore.Future.remove_done_callback.html","python/api/tensorstore.Future.result.html","python/api/tensorstore.FutureLike.html","python/api/tensorstore.IndexDomain.html","python/api/tensorstore.IndexDomain.__getitem__-domain.html","python/api/tensorstore.IndexDomain.__getitem__-expr.html","python/api/tensorstore.IndexDomain.__getitem__-identifier.html","python/api/tensorstore.IndexDomain.__getitem__-selection.html","python/api/tensorstore.IndexDomain.__getitem__-transform.html","python/api/tensorstore.IndexDomain.__init__-components.html","python/api/tensorstore.IndexDomain.__init__-dimensions.html","python/api/tensorstore.IndexDomain.__init__-json.html","python/api/tensorstore.IndexDomain.__len__.html","python/api/tensorstore.IndexDomain.__repr__.html","python/api/tensorstore.IndexDomain.exclusive_max.html","python/api/tensorstore.IndexDomain.hull.html","python/api/tensorstore.IndexDomain.implicit_lower_bounds.html","python/api/tensorstore.IndexDomain.implicit_upper_bounds.html","python/api/tensorstore.IndexDomain.inclusive_max.html","python/api/tensorstore.IndexDomain.inclusive_min.html","python/api/tensorstore.IndexDomain.index_exp.html","python/api/tensorstore.IndexDomain.intersect.html","python/api/tensorstore.IndexDomain.labels.html","python/api/tensorstore.IndexDomain.ndim.html","python/api/tensorstore.IndexDomain.origin.html","python/api/tensorstore.IndexDomain.rank.html","python/api/tensorstore.IndexDomain.shape.html","python/api/tensorstore.IndexDomain.size.html","python/api/tensorstore.IndexDomain.to_json.html","python/api/tensorstore.IndexTransform.html","python/api/tensorstore.IndexTransform.T.html","python/api/tensorstore.IndexTransform.__call__.html","python/api/tensorstore.IndexTransform.__getitem__-domain.html","python/api/tensorstore.IndexTransform.__getitem__-expr.html","python/api/tensorstore.IndexTransform.__getitem__-indices.html","python/api/tensorstore.IndexTransform.__getitem__-transform.html","python/api/tensorstore.IndexTransform.__init__-components.html","python/api/tensorstore.IndexTransform.__init__-domain.html","python/api/tensorstore.IndexTransform.__init__-json.html","python/api/tensorstore.IndexTransform.__repr__.html","python/api/tensorstore.IndexTransform.domain.html","python/api/tensorstore.IndexTransform.implicit_lower_bounds.html","python/api/tensorstore.IndexTransform.implicit_upper_bounds.html","python/api/tensorstore.IndexTransform.input_exclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_max.html","python/api/tensorstore.IndexTransform.input_inclusive_min.html","python/api/tensorstore.IndexTransform.input_labels.html","python/api/tensorstore.IndexTransform.input_origin.html","python/api/tensorstore.IndexTransform.input_rank.html","python/api/tensorstore.IndexTransform.input_shape.html","python/api/tensorstore.IndexTransform.ndim.html","python/api/tensorstore.IndexTransform.oindex.html","python/api/tensorstore.IndexTransform.origin.html","python/api/tensorstore.IndexTransform.output.html","python/api/tensorstore.IndexTransform.output_rank.html","python/api/tensorstore.IndexTransform.shape.html","python/api/tensorstore.IndexTransform.size.html","python/api/tensorstore.IndexTransform.to_json.html","python/api/tensorstore.IndexTransform.vindex.html","python/api/tensorstore.Indexable.html","python/api/tensorstore.KvStore.html","python/api/tensorstore.KvStore.KeyRange.html","python/api/tensorstore.KvStore.KeyRange.__eq__.html","python/api/tensorstore.KvStore.KeyRange.__init__.html","python/api/tensorstore.KvStore.KeyRange.copy.html","python/api/tensorstore.KvStore.KeyRange.empty.html","python/api/tensorstore.KvStore.KeyRange.exclusive_max.html","python/api/tensorstore.KvStore.KeyRange.inclusive_min.html","python/api/tensorstore.KvStore.ReadResult.html","python/api/tensorstore.KvStore.ReadResult.__init__.html","python/api/tensorstore.KvStore.ReadResult.stamp.html","python/api/tensorstore.KvStore.ReadResult.state.html","python/api/tensorstore.KvStore.ReadResult.value.html","python/api/tensorstore.KvStore.Spec.html","python/api/tensorstore.KvStore.Spec.__add__.html","python/api/tensorstore.KvStore.Spec.__new__.html","python/api/tensorstore.KvStore.Spec.__repr__.html","python/api/tensorstore.KvStore.Spec.__truediv__.html","python/api/tensorstore.KvStore.Spec.copy.html","python/api/tensorstore.KvStore.Spec.path.html","python/api/tensorstore.KvStore.Spec.to_json.html","python/api/tensorstore.KvStore.Spec.update.html","python/api/tensorstore.KvStore.Spec.url.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__eq__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.__init__.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.generation.html","python/api/tensorstore.KvStore.TimestampedStorageGeneration.time.html","python/api/tensorstore.KvStore.__delitem__.html","python/api/tensorstore.KvStore.__getitem__.html","python/api/tensorstore.KvStore.__repr__.html","python/api/tensorstore.KvStore.__setitem__.html","python/api/tensorstore.KvStore.copy.html","python/api/tensorstore.KvStore.delete_range.html","python/api/tensorstore.KvStore.list.html","python/api/tensorstore.KvStore.open.html","python/api/tensorstore.KvStore.path.html","python/api/tensorstore.KvStore.read.html","python/api/tensorstore.KvStore.spec.html","python/api/tensorstore.KvStore.transaction.html","python/api/tensorstore.KvStore.url.html","python/api/tensorstore.KvStore.with_transaction.html","python/api/tensorstore.KvStore.write.html","python/api/tensorstore.OutputIndexMap.html","python/api/tensorstore.OutputIndexMap.__init__-constant.html","python/api/tensorstore.OutputIndexMap.__init__-index_array.html","python/api/tensorstore.OutputIndexMap.__init__-input_dimension.html","python/api/tensorstore.OutputIndexMap.index_array.html","python/api/tensorstore.OutputIndexMap.index_range.html","python/api/tensorstore.OutputIndexMap.input_dimension.html","python/api/tensorstore.OutputIndexMap.method.html","python/api/tensorstore.OutputIndexMap.offset.html","python/api/tensorstore.OutputIndexMap.stride.html","python/api/tensorstore.OutputIndexMaps.html","python/api/tensorstore.OutputIndexMaps.__getitem__.html","python/api/tensorstore.OutputIndexMaps.__len__.html","python/api/tensorstore.OutputIndexMaps.rank.html","python/api/tensorstore.OutputIndexMethod.html","python/api/tensorstore.OutputIndexMethod.__init__.html","python/api/tensorstore.OutputIndexMethod.__str__.html","python/api/tensorstore.OutputIndexMethod.array.html","python/api/tensorstore.OutputIndexMethod.constant.html","python/api/tensorstore.OutputIndexMethod.name.html","python/api/tensorstore.OutputIndexMethod.single_input_dimension.html","python/api/tensorstore.OutputIndexMethod.value.html","python/api/tensorstore.Promise.html","python/api/tensorstore.Promise.new.html","python/api/tensorstore.Promise.set_exception.html","python/api/tensorstore.Promise.set_result.html","python/api/tensorstore.Schema.html","python/api/tensorstore.Schema.T.html","python/api/tensorstore.Schema.__eq__.html","python/api/tensorstore.Schema.__getitem__-domain.html","python/api/tensorstore.Schema.__getitem__-expr.html","python/api/tensorstore.Schema.__getitem__-indices.html","python/api/tensorstore.Schema.__getitem__-transform.html","python/api/tensorstore.Schema.__init__-components.html","python/api/tensorstore.Schema.__init__-json.html","python/api/tensorstore.Schema.__repr__.html","python/api/tensorstore.Schema.chunk_layout.html","python/api/tensorstore.Schema.codec.html","python/api/tensorstore.Schema.copy.html","python/api/tensorstore.Schema.dimension_units.html","python/api/tensorstore.Schema.domain.html","python/api/tensorstore.Schema.dtype.html","python/api/tensorstore.Schema.fill_value.html","python/api/tensorstore.Schema.ndim.html","python/api/tensorstore.Schema.oindex.html","python/api/tensorstore.Schema.origin.html","python/api/tensorstore.Schema.rank.html","python/api/tensorstore.Schema.shape.html","python/api/tensorstore.Schema.size.html","python/api/tensorstore.Schema.to_json.html","python/api/tensorstore.Schema.update.html","python/api/tensorstore.Schema.vindex.html","python/api/tensorstore.Spec.html","python/api/tensorstore.Spec.T.html","python/api/tensorstore.Spec.__eq__.html","python/api/tensorstore.Spec.__getitem__-domain.html","python/api/tensorstore.Spec.__getitem__-expr.html","python/api/tensorstore.Spec.__getitem__-indices.html","python/api/tensorstore.Spec.__getitem__-transform.html","python/api/tensorstore.Spec.__new__.html","python/api/tensorstore.Spec.__repr__.html","python/api/tensorstore.Spec.chunk_layout.html","python/api/tensorstore.Spec.codec.html","python/api/tensorstore.Spec.copy.html","python/api/tensorstore.Spec.dimension_units.html","python/api/tensorstore.Spec.domain.html","python/api/tensorstore.Spec.dtype.html","python/api/tensorstore.Spec.fill_value.html","python/api/tensorstore.Spec.kvstore.html","python/api/tensorstore.Spec.ndim.html","python/api/tensorstore.Spec.oindex.html","python/api/tensorstore.Spec.origin.html","python/api/tensorstore.Spec.rank.html","python/api/tensorstore.Spec.schema.html","python/api/tensorstore.Spec.shape.html","python/api/tensorstore.Spec.size.html","python/api/tensorstore.Spec.to_json.html","python/api/tensorstore.Spec.transform.html","python/api/tensorstore.Spec.update.html","python/api/tensorstore.Spec.vindex.html","python/api/tensorstore.TensorStore.html","python/api/tensorstore.TensorStore.T.html","python/api/tensorstore.TensorStore.__array__.html","python/api/tensorstore.TensorStore.__getitem__-domain.html","python/api/tensorstore.TensorStore.__getitem__-expr.html","python/api/tensorstore.TensorStore.__getitem__-indices.html","python/api/tensorstore.TensorStore.__getitem__-transform.html","python/api/tensorstore.TensorStore.__setitem__-domain.html","python/api/tensorstore.TensorStore.__setitem__-expr.html","python/api/tensorstore.TensorStore.__setitem__-indices.html","python/api/tensorstore.TensorStore.__setitem__-transform.html","python/api/tensorstore.TensorStore.astype.html","python/api/tensorstore.TensorStore.chunk_layout.html","python/api/tensorstore.TensorStore.codec.html","python/api/tensorstore.TensorStore.dimension_units.html","python/api/tensorstore.TensorStore.domain.html","python/api/tensorstore.TensorStore.dtype.html","python/api/tensorstore.TensorStore.fill_value.html","python/api/tensorstore.TensorStore.kvstore.html","python/api/tensorstore.TensorStore.mode.html","python/api/tensorstore.TensorStore.ndim.html","python/api/tensorstore.TensorStore.oindex.html","python/api/tensorstore.TensorStore.oindex.__setitem__.html","python/api/tensorstore.TensorStore.origin.html","python/api/tensorstore.TensorStore.rank.html","python/api/tensorstore.TensorStore.read.html","python/api/tensorstore.TensorStore.readable.html","python/api/tensorstore.TensorStore.resolve.html","python/api/tensorstore.TensorStore.schema.html","python/api/tensorstore.TensorStore.shape.html","python/api/tensorstore.TensorStore.size.html","python/api/tensorstore.TensorStore.spec.html","python/api/tensorstore.TensorStore.transaction.html","python/api/tensorstore.TensorStore.vindex.html","python/api/tensorstore.TensorStore.vindex.__setitem__.html","python/api/tensorstore.TensorStore.with_transaction.html","python/api/tensorstore.TensorStore.writable.html","python/api/tensorstore.TensorStore.write.html","python/api/tensorstore.Transaction.html","python/api/tensorstore.Transaction.__init__.html","python/api/tensorstore.Transaction.abort.html","python/api/tensorstore.Transaction.aborted.html","python/api/tensorstore.Transaction.atomic.html","python/api/tensorstore.Transaction.commit_async.html","python/api/tensorstore.Transaction.commit_started.html","python/api/tensorstore.Transaction.commit_sync.html","python/api/tensorstore.Transaction.future.html","python/api/tensorstore.Transaction.open.html","python/api/tensorstore.Unit.html","python/api/tensorstore.Unit.__eq__.html","python/api/tensorstore.Unit.__init__-components.html","python/api/tensorstore.Unit.__init__-json.html","python/api/tensorstore.Unit.__init__-multiplier.html","python/api/tensorstore.Unit.__init__-pair.html","python/api/tensorstore.Unit.__init__-unit.html","python/api/tensorstore.Unit.__mul__.html","python/api/tensorstore.Unit.__truediv__.html","python/api/tensorstore.Unit.base_unit.html","python/api/tensorstore.Unit.multiplier.html","python/api/tensorstore.Unit.to_json.html","python/api/tensorstore.VirtualChunkedReadParameters.html","python/api/tensorstore.VirtualChunkedReadParameters.if_not_equal.html","python/api/tensorstore.VirtualChunkedReadParameters.staleness_bound.html","python/api/tensorstore.VirtualChunkedWriteParameters.html","python/api/tensorstore.VirtualChunkedWriteParameters.if_equal.html","python/api/tensorstore.WriteFutures.html","python/api/tensorstore.WriteFutures.add_done_callback.html","python/api/tensorstore.WriteFutures.cancel.html","python/api/tensorstore.WriteFutures.cancelled.html","python/api/tensorstore.WriteFutures.commit.html","python/api/tensorstore.WriteFutures.copy.html","python/api/tensorstore.WriteFutures.done.html","python/api/tensorstore.WriteFutures.exception.html","python/api/tensorstore.WriteFutures.remove_done_callback.html","python/api/tensorstore.WriteFutures.result.html","python/api/tensorstore.array.html","python/api/tensorstore.bfloat16.html","python/api/tensorstore.bool.html","python/api/tensorstore.cast.html","python/api/tensorstore.complex128.html","python/api/tensorstore.complex64.html","python/api/tensorstore.d.html","python/api/tensorstore.d.__class_getitem__.html","python/api/tensorstore.downsample-spec.html","python/api/tensorstore.downsample-store.html","python/api/tensorstore.dtype.html","python/api/tensorstore.dtype.__call__.html","python/api/tensorstore.dtype.__init__-dtype.html","python/api/tensorstore.dtype.__init__-name.html","python/api/tensorstore.dtype.name.html","python/api/tensorstore.dtype.numpy_dtype.html","python/api/tensorstore.dtype.to_json.html","python/api/tensorstore.dtype.type.html","python/api/tensorstore.float16.html","python/api/tensorstore.float32.html","python/api/tensorstore.float64.html","python/api/tensorstore.inf.html","python/api/tensorstore.int16.html","python/api/tensorstore.int32.html","python/api/tensorstore.int64.html","python/api/tensorstore.int8.html","python/api/tensorstore.json.html","python/api/tensorstore.newaxis.html","python/api/tensorstore.open.html","python/api/tensorstore.string.html","python/api/tensorstore.uint16.html","python/api/tensorstore.uint32.html","python/api/tensorstore.uint64.html","python/api/tensorstore.uint8.html","python/api/tensorstore.ustring.html","python/api/tensorstore.virtual_chunked.html","python/indexing.html","python/tutorial.html","schema.html","spec.html"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":4,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,sphinx:56},objects:{"":{"ChunkLayout/Grid":[408,0,1,"json-ChunkLayout/Grid","Constraints on the write/read/codec chunk grids."],"KvStoreUrl/file":[17,0,1,"json-KvStoreUrl/file","file:// KvStore URL scheme"],"KvStoreUrl/gs":[18,0,1,"json-KvStoreUrl/gs","gs:// KvStore URL scheme"],"KvStoreUrl/http":[19,0,1,"json-KvStoreUrl/http","http:// and https:// KvStore URL scheme"],"KvStoreUrl/memory":[21,0,1,"json-KvStoreUrl/memory","memory:// KvStore URL scheme"],"driver/array":[1,0,1,"json-driver/array",""],"driver/avif":[4,0,1,"json-driver/avif",""],"driver/cast":[2,0,1,"json-driver/cast",""],"driver/downsample":[3,0,1,"json-driver/downsample",""],"driver/jpeg":[5,0,1,"json-driver/jpeg",""],"driver/json":[8,0,1,"json-driver/json",""],"driver/n5":[9,0,1,"json-driver/n5",""],"driver/n5/Codec":[9,0,1,"json-driver/n5/Codec",""],"driver/n5/Compression":[9,0,1,"json-driver/n5/Compression",""],"driver/n5/Compression/blosc":[9,0,1,"json-driver/n5/Compression/blosc",""],"driver/n5/Compression/bzip2":[9,0,1,"json-driver/n5/Compression/bzip2",""],"driver/n5/Compression/gzip":[9,0,1,"json-driver/n5/Compression/gzip",""],"driver/n5/Compression/raw":[9,0,1,"json-driver/n5/Compression/raw",""],"driver/n5/Compression/xz":[9,0,1,"json-driver/n5/Compression/xz",""],"driver/neuroglancer_precomputed":[10,0,1,"json-driver/neuroglancer_precomputed",""],"driver/neuroglancer_precomputed/Codec":[10,0,1,"json-driver/neuroglancer_precomputed/Codec","Neuroglancer Precomputed Codec"],"driver/neuroglancer_precomputed/ShardingSpec":[10,0,1,"json-driver/neuroglancer_precomputed/ShardingSpec","Sharding"],"driver/png":[6,0,1,"json-driver/png",""],"driver/stack":[11,0,1,"json-driver/stack",""],"driver/zarr":[12,0,1,"json-driver/zarr",""],"driver/zarr/Codec":[12,0,1,"json-driver/zarr/Codec",""],"driver/zarr/Compressor":[12,0,1,"json-driver/zarr/Compressor","Compressor"],"driver/zarr/Compressor/blosc":[12,0,1,"json-driver/zarr/Compressor/blosc",""],"driver/zarr/Compressor/bz2":[12,0,1,"json-driver/zarr/Compressor/bz2",""],"driver/zarr/Compressor/zlib":[12,0,1,"json-driver/zarr/Compressor/zlib",""],"kvstore/file":[17,0,1,"json-kvstore/file","JSON specification of file-backed key-value store."],"kvstore/gcs":[18,0,1,"json-kvstore/gcs",""],"kvstore/http":[19,0,1,"json-kvstore/http",""],"kvstore/memory":[21,0,1,"json-kvstore/memory",""],BAZELISK_HOME:[16,9,1,"-",""],CacheRevalidationBound:[7,0,1,"json-CacheRevalidationBound",""],ChunkLayout:[408,0,1,"json-ChunkLayout",""],Codec:[408,0,1,"json-Codec",""],Context:[0,0,1,"json-Context",""],ContextResource:[0,0,1,"json-ContextResource",""],DownsampleMethod:[3,0,1,"json-DownsampleMethod","Downsample method"],GOOGLE_APPLICATION_CREDENTIALS:[13,9,1,"-",""],IndexDomain:[15,0,1,"json-IndexDomain",""],IndexInterval:[15,0,1,"json-IndexInterval","Specifies a closed interval of integer index values."],IndexTransform:[15,0,1,"json-IndexTransform",""],KeyValueStoreBackedChunkDriver:[7,0,1,"json-KeyValueStoreBackedChunkDriver",""],KvStore:[20,0,1,"json-KvStore","Key-value store specification."],KvStoreUrl:[20,0,1,"json-KvStoreUrl","URL representation of a key-value store."],OutputIndexMap:[15,0,1,"json-OutputIndexMap","Specifies a transform from an input space to a single output index."],SSLKEYLOGFILE:[13,9,1,"-",""],Schema:[408,0,1,"json-Schema",""],TENSORSTORE_BAZELISK:[16,9,1,"-",""],TENSORSTORE_BAZEL_BUILD_OPTIONS:[16,9,1,"-",""],TENSORSTORE_BAZEL_COMPILATION_MODE:[16,9,1,"-",""],TENSORSTORE_BAZEL_STARTUP_OPTIONS:[16,9,1,"-",""],TENSORSTORE_CA_BUNDLE:[13,9,1,"-",""],TENSORSTORE_CA_PATH:[13,9,1,"-",""],TENSORSTORE_CURL_VERBOSE:[13,9,1,"-",""],TENSORSTORE_GCS_HTTP_URL:[13,9,1,"-",""],TENSORSTORE_GCS_REQUEST_CONCURRENCY:[13,9,1,"-",""],TENSORSTORE_PREBUILT_DIR:[16,9,1,"-",""],TENSORSTORE_SYSTEM_LIBS:[16,9,1,"-",""],TensorStore:[409,0,1,"json-TensorStore","Specifies a TensorStore to open/create."],Unit:[408,0,1,"json-Unit","Specifies a physical quantity/unit."],all_proxy:[13,9,1,"-",""],dtype:[409,0,1,"json-dtype","Specifies a TensorStore data type."],http_proxy:[13,9,1,"-",""],https_proxy:[13,9,1,"-",""],no_proxy:[13,9,1,"-",""]},"ChunkLayout/Grid":{aspect_ratio:[408,1,2,"json-ChunkLayout/Grid.aspect_ratio","Aspect ratio of the chunk shape."],aspect_ratio_soft_constraint:[408,1,2,"json-ChunkLayout/Grid.aspect_ratio_soft_constraint","Soft constraint on aspect ratio, lower precedence than aspect_ratio."],elements:[408,1,2,"json-ChunkLayout/Grid.elements","Preferred number of elements per chunk."],elements_soft_constraint:[408,1,2,"json-ChunkLayout/Grid.elements_soft_constraint","Preferred number of elements per chunk, lower precedence than\nelements."],shape:[408,1,2,"json-ChunkLayout/Grid.shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[408,1,2,"json-ChunkLayout/Grid.shape_soft_constraint","Preferred chunk sizes for each dimension."]},"Context.cache_pool":{queued_for_writeback_bytes_limit:[0,1,2,"json-Context.cache_pool.queued_for_writeback_bytes_limit",""],total_bytes_limit:[0,1,2,"json-Context.cache_pool.total_bytes_limit",""]},"Context.data_copy_concurrency":{limit:[0,1,2,"json-Context.data_copy_concurrency.limit",""]},"Context.file_io_concurrency":{limit:[0,1,2,"json-Context.file_io_concurrency.limit",""]},"Context.gcs_request_concurrency":{limit:[18,1,2,"json-Context.gcs_request_concurrency.limit",""]},"Context.gcs_request_retries":{initial_delay:[18,1,2,"json-Context.gcs_request_retries.initial_delay",""],max_delay:[18,1,2,"json-Context.gcs_request_retries.max_delay",""],max_retries:[18,1,2,"json-Context.gcs_request_retries.max_retries",""]},"Context.gcs_user_project":{project_id:[18,1,2,"json-Context.gcs_user_project.project_id","Google Cloud project id, e.g. \"my-project\".  The Google Cloud\naccount that is used must have appropriate permissions to bill to the\nspecified project."]},"Context.http_request_concurrency":{limit:[19,1,2,"json-Context.http_request_concurrency.limit",""]},"Context.http_request_retries":{initial_delay:[19,1,2,"json-Context.http_request_retries.initial_delay",""],max_delay:[19,1,2,"json-Context.http_request_retries.max_delay",""],max_retries:[19,1,2,"json-Context.http_request_retries.max_retries",""]},"driver/array":{array:[1,1,2,"json-driver/array.array","Nested array of rank equal to rank specifying the initial value."],context:[1,1,2,"json-driver/array.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[1,1,2,"json-driver/array.data_copy_concurrency",""],driver:[1,1,2,"json-driver/array.driver",""],dtype:[1,1,2,"json-driver/array.dtype","Specifies the data type."],rank:[1,1,2,"json-driver/array.rank","Specifies the rank of the TensorStore."],schema:[1,1,2,"json-driver/array.schema","Specifies constraints on the schema."],transform:[1,1,2,"json-driver/array.transform","Specifies a transform."]},"driver/avif":{cache_pool:[4,1,2,"json-driver/avif.cache_pool",""],context:[4,1,2,"json-driver/avif.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[4,1,2,"json-driver/avif.data_copy_concurrency",""],driver:[4,1,2,"json-driver/avif.driver",""],dtype:[4,1,2,"json-driver/avif.dtype",""],kvstore:[4,1,2,"json-driver/avif.kvstore",""],quantizer:[4,1,2,"json-driver/avif.quantizer",""],rank:[4,1,2,"json-driver/avif.rank",""],schema:[4,1,2,"json-driver/avif.schema","Specifies constraints on the schema."],speed:[4,1,2,"json-driver/avif.speed",""],transform:[4,1,2,"json-driver/avif.transform","Specifies a transform."]},"driver/cast":{base:[2,1,2,"json-driver/cast.base","Base TensorStore to convert."],context:[2,1,2,"json-driver/cast.context","Specifies context resources that augment/override the parent context."],driver:[2,1,2,"json-driver/cast.driver",""],dtype:[2,1,2,"json-driver/cast.dtype","Specifies the data type under which to view the base TensorStore."],rank:[2,1,2,"json-driver/cast.rank","Specifies the rank of the TensorStore."],schema:[2,1,2,"json-driver/cast.schema","Specifies constraints on the schema."],transform:[2,1,2,"json-driver/cast.transform","Specifies a transform."]},"driver/downsample":{base:[3,1,2,"json-driver/downsample.base","Base TensorStore to downsample."],context:[3,1,2,"json-driver/downsample.context","Specifies context resources that augment/override the parent context."],downsample_factors:[3,1,2,"json-driver/downsample.downsample_factors",""],downsample_method:[3,1,2,"json-driver/downsample.downsample_method",""],driver:[3,1,2,"json-driver/downsample.driver",""],dtype:[3,1,2,"json-driver/downsample.dtype","Specifies the data type."],rank:[3,1,2,"json-driver/downsample.rank","Specifies the rank of the TensorStore."],schema:[3,1,2,"json-driver/downsample.schema","Specifies constraints on the schema."],transform:[3,1,2,"json-driver/downsample.transform","Specifies a transform."]},"driver/jpeg":{cache_pool:[5,1,2,"json-driver/jpeg.cache_pool",""],context:[5,1,2,"json-driver/jpeg.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[5,1,2,"json-driver/jpeg.data_copy_concurrency",""],driver:[5,1,2,"json-driver/jpeg.driver",""],dtype:[5,1,2,"json-driver/jpeg.dtype",""],kvstore:[5,1,2,"json-driver/jpeg.kvstore",""],quality:[5,1,2,"json-driver/jpeg.quality",""],rank:[5,1,2,"json-driver/jpeg.rank",""],schema:[5,1,2,"json-driver/jpeg.schema","Specifies constraints on the schema."],transform:[5,1,2,"json-driver/jpeg.transform","Specifies a transform."]},"driver/json":{cache_pool:[8,1,2,"json-driver/json.cache_pool",""],context:[8,1,2,"json-driver/json.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[8,1,2,"json-driver/json.data_copy_concurrency",""],driver:[8,1,2,"json-driver/json.driver",""],dtype:[8,1,2,"json-driver/json.dtype",""],json_pointer:[8,1,2,"json-driver/json.json_pointer",""],kvstore:[8,1,2,"json-driver/json.kvstore",""],path:[8,1,2,"json-driver/json.path","Additional path to the JSON file within the KvStore specified by\nkvstore."],rank:[8,1,2,"json-driver/json.rank",""],recheck_cached_data:[8,1,2,"json-driver/json.recheck_cached_data",""],schema:[8,1,2,"json-driver/json.schema","Specifies constraints on the schema."],transform:[8,1,2,"json-driver/json.transform","Specifies a transform."]},"driver/n5":{assume_metadata:[9,1,2,"json-driver/n5.assume_metadata",""],cache_pool:[9,1,2,"json-driver/n5.cache_pool",""],context:[9,1,2,"json-driver/n5.context","Specifies context resources that augment/override the parent context."],create:[9,1,2,"json-driver/n5.create",""],data_copy_concurrency:[9,1,2,"json-driver/n5.data_copy_concurrency",""],delete_existing:[9,1,2,"json-driver/n5.delete_existing",""],driver:[9,1,2,"json-driver/n5.driver",""],dtype:[9,1,2,"json-driver/n5.dtype","Specifies the data type."],kvstore:[9,1,2,"json-driver/n5.kvstore",""],metadata:[9,1,2,"json-driver/n5.metadata","N5 array metadata."],open:[9,1,2,"json-driver/n5.open",""],path:[9,1,2,"json-driver/n5.path","Additional path within the KvStore specified by\nkvstore."],rank:[9,1,2,"json-driver/n5.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[9,1,2,"json-driver/n5.recheck_cached_data",""],recheck_cached_metadata:[9,1,2,"json-driver/n5.recheck_cached_metadata",""],schema:[9,1,2,"json-driver/n5.schema","Specifies constraints on the schema."],transform:[9,1,2,"json-driver/n5.transform","Specifies a transform."]},"driver/n5.metadata":{axes:[9,1,2,"json-driver/n5.metadata.axes","Specifies a label for each dimension of the dataset."],blockSize:[9,1,2,"json-driver/n5.metadata.blockSize","Chunk dimensions."],compression:[9,1,2,"json-driver/n5.metadata.compression","Specifies the chunk compression method."],dataType:[9,1,2,"json-driver/n5.metadata.dataType","Specifies the data type."],dimensions:[9,1,2,"json-driver/n5.metadata.dimensions","Dimensions of the dataset."],resolution:[9,1,2,"json-driver/n5.metadata.resolution","Specifies the multiplier for the physical units."],units:[9,1,2,"json-driver/n5.metadata.units","Specifies the base physical unit for each dimension."]},"driver/n5/Codec":{compression:[9,1,2,"json-driver/n5/Codec.compression","Specifies the chunk compression method."],driver:[9,1,2,"json-driver/n5/Codec.driver",""]},"driver/n5/Compression":{type:[9,1,2,"json-driver/n5/Compression.type",""]},"driver/n5/Compression/blosc":{clevel:[9,1,2,"json-driver/n5/Compression/blosc.clevel","Specifies the Blosc compression level to use."],cname:[9,1,2,"json-driver/n5/Compression/blosc.cname",""],shuffle:[9,1,2,"json-driver/n5/Compression/blosc.shuffle",""],type:[9,1,2,"json-driver/n5/Compression/blosc.type",""]},"driver/n5/Compression/bzip2":{blockSize:[9,1,2,"json-driver/n5/Compression/bzip2.blockSize","Specifies the bzip2 block size to use (in units of 100KB), which also determine the compression level."],type:[9,1,2,"json-driver/n5/Compression/bzip2.type",""]},"driver/n5/Compression/gzip":{level:[9,1,2,"json-driver/n5/Compression/gzip.level","Specifies the zlib compression level to use."],type:[9,1,2,"json-driver/n5/Compression/gzip.type",""],useZlib:[9,1,2,"json-driver/n5/Compression/gzip.useZlib",""]},"driver/n5/Compression/raw":{type:[9,1,2,"json-driver/n5/Compression/raw.type",""]},"driver/n5/Compression/xz":{preset:[9,1,2,"json-driver/n5/Compression/xz.preset",""],type:[9,1,2,"json-driver/n5/Compression/xz.type",""]},"driver/neuroglancer_precomputed":{assume_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.assume_metadata",""],cache_pool:[10,1,2,"json-driver/neuroglancer_precomputed.cache_pool",""],context:[10,1,2,"json-driver/neuroglancer_precomputed.context","Specifies context resources that augment/override the parent context."],create:[10,1,2,"json-driver/neuroglancer_precomputed.create",""],data_copy_concurrency:[10,1,2,"json-driver/neuroglancer_precomputed.data_copy_concurrency",""],delete_existing:[10,1,2,"json-driver/neuroglancer_precomputed.delete_existing",""],driver:[10,1,2,"json-driver/neuroglancer_precomputed.driver",""],dtype:[10,1,2,"json-driver/neuroglancer_precomputed.dtype","Specifies the data type."],kvstore:[10,1,2,"json-driver/neuroglancer_precomputed.kvstore",""],multiscale_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata","Scale-independent metadata."],open:[10,1,2,"json-driver/neuroglancer_precomputed.open",""],path:[10,1,2,"json-driver/neuroglancer_precomputed.path","Additional path within the KvStore specified by\nkvstore."],rank:[10,1,2,"json-driver/neuroglancer_precomputed.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[10,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_data",""],recheck_cached_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.recheck_cached_metadata",""],scale_index:[10,1,2,"json-driver/neuroglancer_precomputed.scale_index","Zero-based index of the scale to open or create."],scale_metadata:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata","Per-scale metadata."],schema:[10,1,2,"json-driver/neuroglancer_precomputed.schema","Specifies constraints on the schema."],transform:[10,1,2,"json-driver/neuroglancer_precomputed.transform","Specifies a transform."]},"driver/neuroglancer_precomputed.multiscale_metadata":{data_type:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.data_type","Specifies the data type."],num_channels:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.num_channels","Number of channels."],type:[10,1,2,"json-driver/neuroglancer_precomputed.multiscale_metadata.type","Specifying the type of volume."]},"driver/neuroglancer_precomputed.scale_metadata":{chunk_size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.chunk_size","Chunk dimensions (XYZ order)."],compressed_segmentation_block_size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.compressed_segmentation_block_size","Block size for compressed segmentation encoding."],encoding:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.encoding","Specifies the chunk encoding."],jpeg_quality:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.jpeg_quality","JPEG encoding quality."],key:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.key","Specifies the scale key (relative to path)."],resolution:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.resolution","Voxel size in nanometers (XYZ order)."],sharding:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.sharding",""],size:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.size","Voxel dimensions of the volume (XYZ order)."],voxel_offset:[10,1,2,"json-driver/neuroglancer_precomputed.scale_metadata.voxel_offset","Voxel origin of the volume (XYZ order)."]},"driver/neuroglancer_precomputed/Codec":{driver:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.driver",""],encoding:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.encoding","Specifies the chunk encoding."],jpeg_quality:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.jpeg_quality","JPEG encoding quality."],shard_data_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/Codec.shard_data_encoding","Additional data compression when using the sharded format."]},"driver/neuroglancer_precomputed/ShardingSpec":{"@type":[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.@type",""],data_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.data_encoding","Specifies the encoding of the data chunks."],hash:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.hash","Specifies the hash function used to map chunk IDs to shards."],minishard_bits:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_bits","Number of bits of the hashed chunk ID that determine the minishard number."],minishard_index_encoding:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.minishard_index_encoding","Specifies the encoding of the minishard index."],preshift_bits:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.preshift_bits","Number of low-order bits of the chunk ID that do not contribute to the hashed chunk ID."],shard_bits:[10,1,2,"json-driver/neuroglancer_precomputed/ShardingSpec.shard_bits","Number of bits of the hashed chunk ID that determine the shard number."]},"driver/png":{cache_pool:[6,1,2,"json-driver/png.cache_pool",""],compression_level:[6,1,2,"json-driver/png.compression_level",""],context:[6,1,2,"json-driver/png.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[6,1,2,"json-driver/png.data_copy_concurrency",""],driver:[6,1,2,"json-driver/png.driver",""],dtype:[6,1,2,"json-driver/png.dtype",""],kvstore:[6,1,2,"json-driver/png.kvstore",""],rank:[6,1,2,"json-driver/png.rank",""],schema:[6,1,2,"json-driver/png.schema","Specifies constraints on the schema."],transform:[6,1,2,"json-driver/png.transform","Specifies a transform."]},"driver/stack":{context:[11,1,2,"json-driver/stack.context","Specifies context resources that augment/override the parent context."],data_copy_concurrency:[11,1,2,"json-driver/stack.data_copy_concurrency",""],driver:[11,1,2,"json-driver/stack.driver",""],dtype:[11,1,2,"json-driver/stack.dtype","Specifies the data type."],layers:[11,1,2,"json-driver/stack.layers","Array of layered tensorstore drivers."],rank:[11,1,2,"json-driver/stack.rank","Specifies the rank of the TensorStore."],schema:[11,1,2,"json-driver/stack.schema","Specifies constraints on the schema."],transform:[11,1,2,"json-driver/stack.transform","Specifies a transform."]},"driver/zarr":{assume_metadata:[12,1,2,"json-driver/zarr.assume_metadata",""],cache_pool:[12,1,2,"json-driver/zarr.cache_pool",""],context:[12,1,2,"json-driver/zarr.context","Specifies context resources that augment/override the parent context."],create:[12,1,2,"json-driver/zarr.create",""],data_copy_concurrency:[12,1,2,"json-driver/zarr.data_copy_concurrency",""],delete_existing:[12,1,2,"json-driver/zarr.delete_existing",""],driver:[12,1,2,"json-driver/zarr.driver",""],dtype:[12,1,2,"json-driver/zarr.dtype","Specifies the data type."],field:[12,1,2,"json-driver/zarr.field","Name of field to open."],key_encoding:[12,1,2,"json-driver/zarr.key_encoding","Specifies the encoding of chunk indices into key-value store keys."],kvstore:[12,1,2,"json-driver/zarr.kvstore",""],metadata:[12,1,2,"json-driver/zarr.metadata","Zarr array metadata."],metadata_key:[12,1,2,"json-driver/zarr.metadata_key","Specifies the key under which to store the array metadata in JSON format."],open:[12,1,2,"json-driver/zarr.open",""],path:[12,1,2,"json-driver/zarr.path","Additional path within the KvStore specified by\nkvstore."],rank:[12,1,2,"json-driver/zarr.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[12,1,2,"json-driver/zarr.recheck_cached_data",""],recheck_cached_metadata:[12,1,2,"json-driver/zarr.recheck_cached_metadata",""],schema:[12,1,2,"json-driver/zarr.schema","Specifies constraints on the schema."],transform:[12,1,2,"json-driver/zarr.transform","Specifies a transform."]},"driver/zarr.metadata":{chunks:[12,1,2,"json-driver/zarr.metadata.chunks","Chunk dimensions."],compressor:[12,1,2,"json-driver/zarr.metadata.compressor","Specifies the chunk compression method."],dimension_separator:[12,1,2,"json-driver/zarr.metadata.dimension_separator","Specifies the encoding of chunk indices into key-value store keys."],dtype:[12,1,2,"json-driver/zarr.metadata.dtype","Specifies the scalar or structured data type."],fill_value:[12,1,2,"json-driver/zarr.metadata.fill_value","Specifies the fill value."],filters:[12,1,2,"json-driver/zarr.metadata.filters","Specifies the filters to apply to chunks."],order:[12,1,2,"json-driver/zarr.metadata.order","Specifies the data layout for encoded chunks."],shape:[12,1,2,"json-driver/zarr.metadata.shape","Chunked dimensions of the array."],zarr_format:[12,1,2,"json-driver/zarr.metadata.zarr_format",""]},"driver/zarr/Codec":{compressor:[12,1,2,"json-driver/zarr/Codec.compressor","Specifies the chunk compression method."],driver:[12,1,2,"json-driver/zarr/Codec.driver",""],filters:[12,1,2,"json-driver/zarr/Codec.filters","Specifies the filters to apply to chunks."]},"driver/zarr/Compressor":{id:[12,1,2,"json-driver/zarr/Compressor.id",""]},"driver/zarr/Compressor/blosc":{blocksize:[12,1,2,"json-driver/zarr/Compressor/blosc.blocksize","Specifies the Blosc blocksize."],clevel:[12,1,2,"json-driver/zarr/Compressor/blosc.clevel","Specifies the Blosc compression level to use."],cname:[12,1,2,"json-driver/zarr/Compressor/blosc.cname",""],id:[12,1,2,"json-driver/zarr/Compressor/blosc.id",""],shuffle:[12,1,2,"json-driver/zarr/Compressor/blosc.shuffle",""]},"driver/zarr/Compressor/bz2":{id:[12,1,2,"json-driver/zarr/Compressor/bz2.id",""],level:[12,1,2,"json-driver/zarr/Compressor/bz2.level","Specifies the bzip2 buffer size/compression level to use."]},"driver/zarr/Compressor/zlib":{id:[12,1,2,"json-driver/zarr/Compressor/zlib.id",""],level:[12,1,2,"json-driver/zarr/Compressor/zlib.level","Specifies the zlib compression level to use."]},"kvstore/file":{context:[17,1,2,"json-kvstore/file.context",""],driver:[17,1,2,"json-kvstore/file.driver",""],file_io_concurrency:[17,1,2,"json-kvstore/file.file_io_concurrency",""],path:[17,1,2,"json-kvstore/file.path","Path to root directory on local filesystem."]},"kvstore/gcs":{bucket:[18,1,2,"json-kvstore/gcs.bucket","Google Cloud Storage bucket to use."],context:[18,1,2,"json-kvstore/gcs.context",""],driver:[18,1,2,"json-kvstore/gcs.driver",""],gcs_request_concurrency:[18,1,2,"json-kvstore/gcs.gcs_request_concurrency",""],gcs_request_retries:[18,1,2,"json-kvstore/gcs.gcs_request_retries",""],gcs_user_project:[18,1,2,"json-kvstore/gcs.gcs_user_project",""],path:[18,1,2,"json-kvstore/gcs.path","Key prefix within the key-value store."]},"kvstore/http":{base_url:[19,1,2,"json-kvstore/http.base_url","Base URL."],context:[19,1,2,"json-kvstore/http.context",""],driver:[19,1,2,"json-kvstore/http.driver",""],headers:[19,1,2,"json-kvstore/http.headers","Additional HTTP headers to send with every request."],http_request_concurrency:[19,1,2,"json-kvstore/http.http_request_concurrency",""],http_request_retries:[19,1,2,"json-kvstore/http.http_request_retries",""],path:[19,1,2,"json-kvstore/http.path","Path relative to base_url."]},"kvstore/memory":{atomic:[21,1,2,"json-kvstore/memory.atomic",""],context:[21,1,2,"json-kvstore/memory.context",""],driver:[21,1,2,"json-kvstore/memory.driver",""],memory_key_value_store:[21,1,2,"json-kvstore/memory.memory_key_value_store",""],path:[21,1,2,"json-kvstore/memory.path","Key prefix within the key-value store."]},"tensorstore.ChunkLayout":{"__init__(components)":[39,3,1,"","Constructs from component parts."],"__init__(json)":[40,3,1,"","Constructs from the JSON representation."],Grid:[24,2,1,"","Describes a regular grid layout for write/read/codec chunks."],__eq__:[38,3,1,"","Compares two chunk layouts for equality."],codec_chunk:[41,5,1,"","Chunk grid used by the codec."],grid_origin:[42,5,1,"","Hard constraints on the grid origin."],grid_origin_soft_constraint:[43,5,1,"","Soft constraints on the grid origin."],inner_order:[44,5,1,"","Permutation specifying the element storage order within the innermost chunks."],inner_order_soft_constraint:[45,5,1,"","Permutation specifying soft constraint on the element storage order."],ndim:[46,5,1,"","Alias for rank."],rank:[47,5,1,"","Number of dimensions in the index space."],read_chunk:[48,5,1,"","Chunk grid for efficient reads."],read_chunk_template:[49,5,1,"","Chunk offset and shape for efficient reads."],to_json:[50,3,1,"","Converts to the JSON representation."],update:[51,3,1,"","Adds additional constraints."],write_chunk:[52,5,1,"","Chunk grid for efficient writes."],write_chunk_template:[53,5,1,"","Chunk offset and shape for efficient writes."]},"tensorstore.ChunkLayout.Grid":{"__init__(components)":[26,3,1,"","Constructs a chunk grid."],"__init__(json)":[27,3,1,"","Constructs from the JSON representation."],__eq__:[25,3,1,"","Compares two chunk grids for equality."],aspect_ratio:[28,5,1,"","Chunk shape aspect ratio."],aspect_ratio_soft_constraint:[29,5,1,"","Soft constraints on chunk shape aspect ratio."],elements:[30,5,1,"","Target number of elements per chunk."],elements_soft_constraint:[31,5,1,"","Soft constraint on target number of elements per chunk."],ndim:[32,5,1,"","Alias for rank."],rank:[33,5,1,"","Number of dimensions, or None if unspecified."],shape:[34,5,1,"","Hard constraints on chunk shape."],shape_soft_constraint:[35,5,1,"","Soft constraints on chunk shape."],to_json:[36,3,1,"","Converts to the JSON representation."],update:[37,3,1,"","Adds additional constraints."]},"tensorstore.ChunkLayout.Grid.__init__(components)":{aspect_ratio:[26,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[26,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[26,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[26,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[26,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[26,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[26,4,2,"p-rank","Specifies the number of dimensions."],shape:[26,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[26,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.Grid.update":{aspect_ratio:[37,4,2,"p-aspect_ratio","Aspect ratio for each dimension."],aspect_ratio_soft_constraint:[37,4,2,"p-aspect_ratio_soft_constraint","Soft constraints on the aspect ratio for each dimension."],elements:[37,4,2,"p-elements","Target number of elements per chunk."],elements_soft_constraint:[37,4,2,"p-elements_soft_constraint","Soft constraint on the target number of elements per chunk."],grid:[37,4,2,"p-grid","Other grid constraints to merge in."],grid_soft_constraint:[37,4,2,"p-grid_soft_constraint","Other grid constraints to merge in as soft constraints."],rank:[37,4,2,"p-rank","Specifies the number of dimensions."],shape:[37,4,2,"p-shape","Hard constraints on the chunk size for each dimension."],shape_soft_constraint:[37,4,2,"p-shape_soft_constraint","Soft constraints on the chunk size for each dimension."]},"tensorstore.ChunkLayout.__init__(components)":{chunk:[39,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[39,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[39,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[39,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[39,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[39,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[39,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[39,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[39,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[39,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[39,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[39,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[39,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[39,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[39,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[39,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[39,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[39,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[39,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[39,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[39,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[39,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[39,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[39,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[39,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[39,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[39,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[39,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[39,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[39,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[39,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[39,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[39,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[39,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.ChunkLayout.update":{chunk:[51,4,2,"p-chunk","Common constraints on write, read, and codec chunks."],chunk_aspect_ratio:[51,4,2,"p-chunk_aspect_ratio","Hard constraints on the write, read, and codec chunk aspect ratio."],chunk_aspect_ratio_soft_constraint:[51,4,2,"p-chunk_aspect_ratio_soft_constraint","Soft constraints on the write, read, and codec chunk aspect ratio."],chunk_elements:[51,4,2,"p-chunk_elements","Hard constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON elements member of\nChunkLayout.chunk."],chunk_elements_soft_constraint:[51,4,2,"p-chunk_elements_soft_constraint","Soft constraints on the target number of elements for write and read chunks.\nCorresponds to the JSON\nelements_soft_constraint member of\nChunkLayout.chunk."],chunk_shape:[51,4,2,"p-chunk_shape","Hard constraints on both the write and read chunk shape."],chunk_shape_soft_constraint:[51,4,2,"p-chunk_shape_soft_constraint","Soft constraints on both the write and read chunk shape."],codec_chunk:[51,4,2,"p-codec_chunk","Constraints on codec chunks."],codec_chunk_aspect_ratio:[51,4,2,"p-codec_chunk_aspect_ratio","Soft constraints on the codec chunk aspect ratio."],codec_chunk_aspect_ratio_soft_constraint:[51,4,2,"p-codec_chunk_aspect_ratio_soft_constraint","Soft constraints on the codec chunk aspect ratio."],codec_chunk_elements:[51,4,2,"p-codec_chunk_elements","Hard constraints on the target number of elements for codec chunks."],codec_chunk_elements_soft_constraint:[51,4,2,"p-codec_chunk_elements_soft_constraint","Soft constraints on the target number of elements for codec chunks."],codec_chunk_shape:[51,4,2,"p-codec_chunk_shape","Soft constraints on the codec chunk shape."],codec_chunk_shape_soft_constraint:[51,4,2,"p-codec_chunk_shape_soft_constraint","Soft constraints on the codec chunk shape."],finalize:[51,4,2,"p-finalize","Validates and converts the layout into a precise chunk\nlayout."],grid_origin:[51,4,2,"p-grid_origin","Hard constraints on the origin of the chunk grid.\nCorresponds to the JSON ChunkLayout.grid_origin member."],grid_origin_soft_constraint:[51,4,2,"p-grid_origin_soft_constraint","Soft constraints on the origin of the chunk grid."],inner_order:[51,4,2,"p-inner_order","Permutation specifying the element storage order within the innermost chunks.\nCorresponds to the JSON ChunkLayout.inner_order member."],inner_order_soft_constraint:[51,4,2,"p-inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint."],rank:[51,4,2,"p-rank","Specifies the number of dimensions."],read_chunk:[51,4,2,"p-read_chunk","Constraints on read chunks."],read_chunk_aspect_ratio:[51,4,2,"p-read_chunk_aspect_ratio","Hard constraints on the read chunk aspect ratio."],read_chunk_aspect_ratio_soft_constraint:[51,4,2,"p-read_chunk_aspect_ratio_soft_constraint","Soft constraints on the read chunk aspect ratio."],read_chunk_elements:[51,4,2,"p-read_chunk_elements","Hard constraints on the target number of elements for read chunks."],read_chunk_elements_soft_constraint:[51,4,2,"p-read_chunk_elements_soft_constraint","Soft constraints on the target number of elements for read chunks."],read_chunk_shape:[51,4,2,"p-read_chunk_shape","Hard constraints on the read chunk shape."],read_chunk_shape_soft_constraint:[51,4,2,"p-read_chunk_shape_soft_constraint","Soft constraints on the read chunk shape."],write_chunk:[51,4,2,"p-write_chunk","Constraints on write chunks."],write_chunk_aspect_ratio:[51,4,2,"p-write_chunk_aspect_ratio","Hard constraints on the write chunk aspect ratio."],write_chunk_aspect_ratio_soft_constraint:[51,4,2,"p-write_chunk_aspect_ratio_soft_constraint","Soft constraints on the write chunk aspect ratio."],write_chunk_elements:[51,4,2,"p-write_chunk_elements","Hard constraints on the target number of elements for write chunks."],write_chunk_elements_soft_constraint:[51,4,2,"p-write_chunk_elements_soft_constraint","Soft constraints on the target number of elements for write chunks."],write_chunk_shape:[51,4,2,"p-write_chunk_shape","Hard constraints on the write chunk shape."],write_chunk_shape_soft_constraint:[51,4,2,"p-write_chunk_shape_soft_constraint","Soft constraints on the write chunk shape."]},"tensorstore.CodecSpec":{__init__:[55,3,1,"","Constructs from the JSON representation."],to_json:[56,3,1,"","Converts to the JSON representation."]},"tensorstore.Context":{"__init__(default)":[64,3,1,"","Constructs a default context."],"__init__(json)":[65,3,1,"","Constructs a context from its JSON representation."],"__init__(spec)":[66,3,1,"","Constructs a context from a parsed spec."],Resource:[58,2,1,"","Handle to a context resource."],Spec:[60,2,1,"","Parsed representation of a JSON Context specification."],__getitem__:[63,3,1,"","Creates or retrieves the context resource for the given key."],parent:[67,5,1,"","Parent context from which this context inherits."],spec:[68,5,1,"","Spec from which this context was constructed."]},"tensorstore.Context.Resource":{to_json:[59,3,1,"","Returns the JSON representation of the context resource."]},"tensorstore.Context.Spec":{__init__:[61,3,1,"","Creates a context specification from its JSON representation."],to_json:[62,3,1,"","Returns the JSON representation."]},"tensorstore.Context.Spec.to_json":{include_defaults:[62,4,2,"p-include_defaults","Indicates whether to include members even if they are equal to the default value."]},"tensorstore.Context.__getitem__":{key:[63,4,2,"p-key","Resource key, of the form '<resource-type>' or\n<resource-type>#<id>."]},"tensorstore.Context.__init__(json)":{json:[65,4,2,"p-json","JSON representation of the context."],parent:[65,4,2,"p-parent","Parent context from which to inherit."]},"tensorstore.Context.__init__(spec)":{parent:[66,4,2,"p-parent","Parent context from which to inherit."],spec:[66,4,2,"p-spec","Parsed context spec."]},"tensorstore.Dim":{"__contains__(dim)":[70,3,1,"","Checks if the interval contains another interval."],"__contains__(index)":[71,3,1,"","Checks if the interval contains a given index."],"__init__(exclusive_max)":[73,3,1,"","Constructs a half-open interval [inclusive_min, exclusive_max)`."],"__init__(inclusive_max)":[74,3,1,"","Constructs a closed interval [inclusive_min, inclusive_max]."],"__init__(size)":[75,3,1,"","Constructs a sized interval [inclusive_min, inclusive_min+size)."],"__init__(unbounded)":[76,3,1,"","Constructs an unbounded interval (-inf, +inf)."],__eq__:[72,3,1,"","Compares for equality with another interval."],__iter__:[77,3,1,"","Enables iteration over the indices contained in the interval."],__len__:[78,3,1,"","Size of the interval, equivalent to size."],__repr__:[79,3,1,"","Returns the string representation as a Python expression."],__str__:[80,3,1,"","Returns the string representation of the interval."],empty:[81,5,1,"","Returns True if size is zero."],exclusive_max:[82,5,1,"","Exclusive upper bound of the interval."],exclusive_min:[83,5,1,"","Exclusive lower bound of the interval."],finite:[84,5,1,"","Indicates if the interval is finite."],hull:[85,3,1,"","Hull with another Dim."],implicit_lower:[86,5,1,"","Indicates if the lower bound is implicit/resizeable."],implicit_upper:[87,5,1,"","Indicates if the upper bound is implicit/resizeable."],inclusive_max:[88,5,1,"","Inclusive upper bound of the interval."],inclusive_min:[89,5,1,"","Inclusive lower bound of the interval."],intersect:[90,3,1,"","Intersect with another Dim."],label:[91,5,1,"","Dimension label, or the empty string to indicate an unlabeled dimension."],size:[92,5,1,"","Size of the interval."]},"tensorstore.Dim.__init__(exclusive_max)":{exclusive_max:[73,4,2,"p-exclusive_max","Exclusive upper bound."],implicit_lower:[73,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[73,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[73,4,2,"p-inclusive_min","Inclusive lower bound."],label:[73,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(inclusive_max)":{implicit_lower:[74,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[74,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_max:[74,4,2,"p-inclusive_max","Inclusive upper bound."],inclusive_min:[74,4,2,"p-inclusive_min","Inclusive lower bound."],label:[74,4,2,"p-label","Dimension label."]},"tensorstore.Dim.__init__(size)":{implicit_lower:[75,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[75,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],inclusive_min:[75,4,2,"p-inclusive_min","Inclusive lower bound."],label:[75,4,2,"p-label","Dimension label."],size:[75,4,2,"p-size","Size of the interval."]},"tensorstore.Dim.__init__(unbounded)":{implicit_lower:[76,4,2,"p-implicit_lower","Indicates whether the lower bound is\nimplicit."],implicit_upper:[76,4,2,"p-implicit_upper","Indicates whether the upper bound is\nimplicit."],label:[76,4,2,"p-label","Dimension label."]},"tensorstore.Dim.hull":{other:[85,4,2,"p-other","Object to hull with."]},"tensorstore.Dim.intersect":{other:[90,4,2,"p-other","Object to intersect with."]},"tensorstore.DimExpression":{__getitem__:[94,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],diagonal:[95,5,1,"","Extracts the diagonal of the selected dimensions."],label:[96,3,1,"","Sets (or changes) the labels of the selected dimensions."],oindex:[97,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],stride:[98,3,1,"","Strides the domains of the selected input dimensions by the specified amounts."],translate_backward_by:[99,3,1,"","Translates (shifts) the domains of the selected input dimensions backward by the\nspecified offsets, without affecting the output range."],translate_by:[100,3,1,"","Translates (shifts) the domains of the selected input dimensions by the\nspecified offsets, without affecting the output range."],translate_to:[101,3,1,"","Translates the domains of the selected input dimensions to the specified\norigins without affecting the output range."],transpose:[102,3,1,"","Transposes the selected dimensions to the specified target indices."],vindex:[103,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.DimExpression.label":{labels:[96,4,2,"p-labels","Dimension labels for each selected dimension."]},"tensorstore.DimExpression.stride":{strides:[98,4,2,"p-strides","Strides for each selected dimension."]},"tensorstore.DimExpression.translate_backward_by":{offsets:[99,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_by":{offsets:[100,4,2,"p-offsets","The offsets for each of the selected dimensions."]},"tensorstore.DimExpression.translate_to":{origins:[101,4,2,"p-origins","The new origins for each of the selected dimensions."]},"tensorstore.DimExpression.transpose":{target:[102,4,2,"p-target","Target dimension indices for the selected dimensions."]},"tensorstore.Future":{__new__:[105,3,1,"","Converts a FutureLike object to a Future."],add_done_callback:[106,3,1,"","Registers a callback to be invoked upon completion of the asynchronous operation."],cancel:[107,3,1,"","Requests cancellation of the asynchronous operation."],cancelled:[108,3,1,"","Queries whether the asynchronous operation has been cancelled."],done:[109,3,1,"","Queries whether the asynchronous operation has completed or been cancelled."],exception:[110,3,1,"","Blocks until asynchronous operation completes, and returns the error if any."],force:[111,3,1,"","Ensures the asynchronous operation begins executing."],remove_done_callback:[112,3,1,"","Unregisters a previously-registered callback."],result:[113,3,1,"","Blocks until the asynchronous operation completes, and returns the result."]},"tensorstore.Future.__new__":{future:[105,4,2,"p-future","Specifies the immediate or asynchronous result."],loop:[105,4,2,"p-loop","Event loop on which to run future if it is a\ncoroutine."]},"tensorstore.Future.exception":{deadline:[110,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[110,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.Future.result":{deadline:[113,4,2,"p-deadline","Deadline in seconds since the Unix epoch."],timeout:[113,4,2,"p-timeout","Maximum number of seconds to block."]},"tensorstore.IndexDomain":{"__getitem__(domain)":[116,3,1,"","Slices this domain by another domain."],"__getitem__(expr)":[117,3,1,"","Transforms the domain by a dimension expression."],"__getitem__(identifier)":[118,3,1,"","Returns the single dimension specified by identifier."],"__getitem__(selection)":[119,3,1,"","Returns a new domain with a subset of the dimensions."],"__getitem__(transform)":[120,3,1,"","Transforms the domain using an explicit index transform."],"__init__(components)":[121,3,1,"","Constructs an index domain from component vectors."],"__init__(dimensions)":[122,3,1,"","Constructs an index domain from a :py:class`.Dim` sequence."],"__init__(json)":[123,3,1,"","Constructs an index domain from its JSON representation."],__len__:[124,3,1,"","Returns the number of dimensions (rank)."],__repr__:[125,3,1,"","Returns the string representation."],exclusive_max:[126,5,1,"","Exclusive upper bound of the domain."],hull:[127,3,1,"","Computes the hull (minimum containing box) with another domain."],implicit_lower_bounds:[128,5,1,"","Indicates whether the lower bound of each dimension is implicit or explicit."],implicit_upper_bounds:[129,5,1,"","Indicates whether the upper bound of each dimension is implicit or explicit."],inclusive_max:[130,5,1,"","Inclusive upper bound of the domain."],inclusive_min:[131,5,1,"","Inclusive lower bound of the domain, alias of origin."],index_exp:[132,5,1,"","Equivalent NumPy-compatible index expression."],intersect:[133,3,1,"","Intersects with another domain."],labels:[134,5,1,"","Dimension labels for each dimension."],ndim:[135,5,1,"","Alias for rank."],origin:[136,5,1,"","Inclusive lower bound of the domain."],rank:[137,5,1,"","Number of dimensions in the index space."],shape:[138,5,1,"","Shape of the domain."],size:[139,5,1,"","Total number of elements in the domain."],to_json:[140,3,1,"","Returns the JSON representation."]},"tensorstore.IndexDomain.__getitem__(expr)":{expr:[117,4,2,"p-expr","Dimension expression to apply."]},"tensorstore.IndexDomain.__getitem__(identifier)":{identifier:[118,4,2,"p-identifier","Specifies a dimension by integer index or label."]},"tensorstore.IndexDomain.__getitem__(selection)":{selection:[119,4,2,"p-selection","Specifies the dimensions to include, either by index or label."]},"tensorstore.IndexDomain.__getitem__(transform)":{transform:[120,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.IndexDomain.__init__(components)":{exclusive_max:[121,4,2,"p-exclusive_max","Exclusive upper bounds for each dimension."],implicit_lower_bounds:[121,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[121,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],inclusive_max:[121,4,2,"p-inclusive_max","Inclusive upper bounds for each dimension."],inclusive_min:[121,4,2,"p-inclusive_min","Inclusive lower bounds for each dimension."],labels:[121,4,2,"p-labels","Dimension labels."],rank:[121,4,2,"p-rank","Number of dimensions."],shape:[121,4,2,"p-shape","Size for each dimension."]},"tensorstore.IndexDomain.__init__(dimensions)":{dimensions:[122,4,2,"p-dimensions","Sequence of :py:class`.Dim` objects."]},"tensorstore.IndexDomain.hull":{other:[127,4,2,"p-other","Object to hull with."]},"tensorstore.IndexDomain.intersect":{other:[133,4,2,"p-other","Object to intersect with."]},"tensorstore.IndexTransform":{"__getitem__(domain)":[144,3,1,"","Slices this index transform by another domain."],"__getitem__(expr)":[145,3,1,"","Applies a dimension expression to this transform."],"__getitem__(indices)":[146,3,1,"","Applies a NumPy-style indexing operation with default index array semantics."],"__getitem__(transform)":[147,3,1,"","Composes this index transform with another index transform."],"__init__(components)":[148,3,1,"","Constructs an index transform from component vectors."],"__init__(domain)":[149,3,1,"","Constructs an index transform from a domain and output index maps."],"__init__(json)":[150,3,1,"","Constructs an index transform from its JSON representation."],T:[142,5,1,"","View with transposed domain (reversed dimension order)."],__call__:[143,3,1,"","Maps an input index vector to an output index vector."],__repr__:[151,3,1,"","Returns the string representation."],domain:[152,5,1,"","Input domain of the index transform."],implicit_lower_bounds:[153,5,1,"","Indicates whether the lower bound of each input dimension is implicit or explicit."],implicit_upper_bounds:[154,5,1,"","Indicates whether the upper bound of each input dimension is implicit or explicit."],input_exclusive_max:[155,5,1,"","Exclusive upper bound of the input domain."],input_inclusive_max:[156,5,1,"","Inclusive upper bound of the input domain."],input_inclusive_min:[157,5,1,"","Inclusive lower bound of the input domain, alias for input_origin."],input_labels:[158,5,1,"","Dimension labels for each input dimension."],input_origin:[159,5,1,"","Inclusive lower bound of the input domain."],input_rank:[160,5,1,"","Rank of the input space."],input_shape:[161,5,1,"","Shape of the input domain."],ndim:[162,5,1,"","Rank of the input space, alias for input_rank."],oindex:[163,3,1,"","Applies a NumPy-style indexing operation with outer indexing semantics."],origin:[164,5,1,"","Inclusive lower bound of the domain."],output:[165,5,1,"","Output index maps."],output_rank:[166,5,1,"","Rank of the output space."],shape:[167,5,1,"","Shape of the domain."],size:[168,5,1,"","Total number of elements in the domain."],to_json:[169,3,1,"","Returns the JSON representation of the transform."],vindex:[170,3,1,"","Applies a NumPy-style indexing operation with vectorized indexing semantics."]},"tensorstore.IndexTransform.__call__":{indices:[143,4,2,"p-indices","Input vector of length input_rank."]},"tensorstore.IndexTransform.__init__(components)":{implicit_lower_bounds:[148,4,2,"p-implicit_lower_bounds","Indicates whether each lower bound is\nimplicit or explicit."],implicit_upper_bounds:[148,4,2,"p-implicit_upper_bounds","Indicates whether each upper bound is\nimplicit or explicit."],input_exclusive_max:[148,4,2,"p-input_exclusive_max","Exclusive upper bounds for each input dimension."],input_inclusive_max:[148,4,2,"p-input_inclusive_max","Inclusive upper bounds for each input dimension."],input_inclusive_min:[148,4,2,"p-input_inclusive_min","Inclusive lower bounds for each input dimension."],input_labels:[148,4,2,"p-input_labels","Dimension labels for each input\ndimension."],input_rank:[148,4,2,"p-input_rank","Number of input dimensions."],input_shape:[148,4,2,"p-input_shape","Size for each input dimension."],output:[148,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.IndexTransform.__init__(domain)":{domain:[149,4,2,"p-domain","The domain of the index transform."],output:[149,4,2,"p-output","Sequence of output index maps, or OutputIndexMaps object\nfrom an existing transform."]},"tensorstore.KvStore":{KeyRange:[173,2,1,"","Half-open interval of byte string keys, according to lexicographical order."],ReadResult:[180,2,1,"","Specifies the result of a read operation."],Spec:[185,2,1,"","Parsed representation of a JSON key-value store specification."],TimestampedStorageGeneration:[195,2,1,"","Specifies a storage generation identifier and a timestamp."],__delitem__:[200,3,1,"","Synchronously deletes a single key."],__getitem__:[201,3,1,"","Synchronously reads the value of a single key."],__repr__:[202,3,1,"","Returns a string representation based on the  JSON representation."],__setitem__:[203,3,1,"","Synchronously writes the value of a single key."],copy:[204,3,1,"","Returns a copy of the key-value store."],delete_range:[205,3,1,"","Deletes a key range."],list:[206,3,1,"","Lists the keys in the key-value store."],open:[207,3,1,"","Opens a key-value store."],path:[208,5,1,"","Path prefix within the base key-value store."],read:[209,3,1,"","Reads the value of a single key."],spec:[210,3,1,"","Spec that may be used to re-open or re-create the key-value store."],transaction:[211,5,1,"","Transaction bound to this key-value store."],url:[212,5,1,"","URL representation of the key-value store specification."],with_transaction:[213,3,1,"","Returns a transaction-bound view of this key-value store."],write:[214,3,1,"","Writes or deletes a single key."]},"tensorstore.KvStore.KeyRange":{__eq__:[174,3,1,"","Compares with another range for equality."],__init__:[175,3,1,"","Constructs a key range from the specified half-open bounds."],copy:[176,3,1,"","Returns a copy of the range."],empty:[177,5,1,"","Indicates if the range contains no keys."],exclusive_max:[178,5,1,"","Exclusive upper bound of the range."],inclusive_min:[179,5,1,"","Inclusive lower bound of the range."]},"tensorstore.KvStore.KeyRange.__init__":{exclusive_max:[175,4,2,"p-exclusive_max","Exclusive upper bound of the range."],inclusive_min:[175,4,2,"p-inclusive_min","Inclusive lower bound of the range."]},"tensorstore.KvStore.ReadResult":{__init__:[181,3,1,"","Constructs a read result."],stamp:[182,5,1,"","Generation and timestamp associated with the value."],state:[183,5,1,"","Indicates the interpretation of value."],value:[184,5,1,"","Value associated with the key."]},"tensorstore.KvStore.Spec":{__add__:[186,3,1,"","Returns a key-value store with the suffix appended to the path."],__new__:[187,3,1,"","Constructs from the JSON representation or a URL."],__repr__:[188,3,1,"","Returns a string representation based on the  JSON representation."],__truediv__:[189,3,1,"","Returns a key-value store with an additional path component joined to the path."],copy:[190,3,1,"","Returns a copy of the key-value store spec."],path:[191,5,1,"","Path prefix within the base key-value store."],to_json:[192,3,1,"","Converts to the JSON representation."],update:[193,3,1,"","Modifies a spec."],url:[194,5,1,"","URL representation of the key-value store specification."]},"tensorstore.KvStore.Spec.update":{context:[193,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],strip_context:[193,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[193,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.TimestampedStorageGeneration":{__eq__:[196,3,1,"","Compares two timestamped storage generations for equality."],__init__:[197,3,1,"","Constructs from a storage generation and time."],generation:[198,5,1,"","Identifies a specific version of a key-value store entry."],time:[199,5,1,"","Time (seconds since Unix epoch) at which generation is valid."]},"tensorstore.KvStore.__delitem__":{key:[200,4,2,"p-key","Key to delete."]},"tensorstore.KvStore.__getitem__":{key:[201,4,2,"p-key","The key to read."]},"tensorstore.KvStore.__setitem__":{key:[203,4,2,"p-key","Key to write/delete."],value:[203,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.KvStore.delete_range":{range:[205,4,2,"p-range","Key range to delete."]},"tensorstore.KvStore.list":{range:[206,4,2,"p-range","If specified, restricts to the specified key range."],strip_prefix_length:[206,4,2,"p-strip_prefix_length","Strips the specified number of bytes from the start of\nthe returned keys."]},"tensorstore.KvStore.open":{context:[207,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],spec:[207,4,2,"p-spec","Key-value store spec to open."],transaction:[207,4,2,"p-transaction","Transaction to use for read/write operations."]},"tensorstore.KvStore.read":{if_not_equal:[209,4,2,"p-if_not_equal","If specified, the read is aborted if the generation associated\nwith key matches if_not_equal."],key:[209,4,2,"p-key","The key to read."],staleness_bound:[209,4,2,"p-staleness_bound","Specifies a time in (fractional) seconds since the Unix\nepoch."]},"tensorstore.KvStore.spec":{retain_context:[210,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[210,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.KvStore.write":{if_equal:[214,4,2,"p-if_equal","If specified, indicates a conditional write operation."],key:[214,4,2,"p-key","Key to write/delete."],value:[214,4,2,"p-value","Value to store, or None to delete."]},"tensorstore.OutputIndexMap":{"__init__(constant)":[216,3,1,"","Constructs a constant map."],"__init__(index_array)":[217,3,1,"","Constructs an index array map."],"__init__(input_dimension)":[218,3,1,"","Constructs a single input dimension map."],index_array:[219,5,1,"",""],index_range:[220,5,1,"",""],input_dimension:[221,5,1,"",""],method:[222,5,1,"",""],offset:[223,5,1,"",""],stride:[224,5,1,"",""]},"tensorstore.OutputIndexMaps":{__getitem__:[226,3,1,"",""],__len__:[227,3,1,"","Returns the output rank."],rank:[228,5,1,"","Returns the output rank."]},"tensorstore.OutputIndexMethod":{__init__:[230,3,1,"",""],__str__:[231,3,1,"","name(self: handle) -> str"],array:[232,6,1,"",""],constant:[233,6,1,"",""],name:[234,5,1,"",""],single_input_dimension:[235,6,1,"",""],value:[236,5,1,"",""]},"tensorstore.Promise":{"new":[238,3,1,"","Creates a linked promise and future pair."],set_exception:[239,3,1,"","Marks the linked future as unsuccessfully completed with the specified error."],set_result:[240,3,1,"","Marks the linked future as successfully completed with the specified result."]},"tensorstore.Schema":{"__getitem__(domain)":[244,3,1,"","Transforms the schema using an explicit index domain."],"__getitem__(expr)":[245,3,1,"","Transforms the schema using a dimension expression."],"__getitem__(indices)":[246,3,1,"","Transforms the schema using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[247,3,1,"","Transforms the schema using an explicit index transform."],"__init__(components)":[248,3,1,"","Constructs from component parts."],"__init__(json)":[249,3,1,"","Constructs from its JSON representation."],T:[242,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[243,3,1,"","Compares with another Schema for equality based on the JSON representation."],__repr__:[250,3,1,"","Returns a string representation based on the  JSON representation."],chunk_layout:[251,5,1,"","Chunk layout constraints specified by the schema."],codec:[252,5,1,"","Codec constraints specified by the schema."],copy:[253,3,1,"","Returns a copy of the schema."],dimension_units:[254,5,1,"","Physical units of each dimension of the domain."],domain:[255,5,1,"","Domain of the schema, or None if unspecified."],dtype:[256,5,1,"","Data type, or None if unspecified."],fill_value:[257,5,1,"","Fill value specified by the schema."],ndim:[258,5,1,"","Alias for rank."],oindex:[259,3,1,"","Transforms the schema using NumPy-style indexing with outer indexing semantics."],origin:[260,5,1,"","Inclusive lower bound of the domain."],rank:[261,5,1,"","Rank of the schema, or None if unspecified."],shape:[262,5,1,"","Shape of the domain."],size:[263,5,1,"","Total number of elements in the domain."],to_json:[264,3,1,"","Converts to the JSON representation."],update:[265,3,1,"","Adds additional constraints."],vindex:[266,3,1,"","Transforms the schema using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Schema.__getitem__(domain)":{domain:[244,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Schema.__getitem__(transform)":{transform:[247,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Schema.__init__(components)":{chunk_layout:[248,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[248,4,2,"p-codec","Constrains the codec."],dimension_units:[248,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[248,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[248,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[248,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[248,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[248,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[248,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Schema.update":{chunk_layout:[265,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[265,4,2,"p-codec","Constrains the codec."],dimension_units:[265,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[265,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[265,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[265,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],rank:[265,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[265,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[265,4,2,"p-shape","Constrains the shape and origin of the TensorStore."]},"tensorstore.Spec":{"__getitem__(domain)":[270,3,1,"","Transforms the spec using an explicit index domain."],"__getitem__(expr)":[271,3,1,"","Transforms the spec using a dimension expression."],"__getitem__(indices)":[272,3,1,"","Transforms the spec using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[273,3,1,"","Transforms the spec using an explicit index transform."],T:[268,5,1,"","View with transposed domain (reversed dimension order)."],__eq__:[269,3,1,"","Compares with another Spec for equality based on the JSON representation."],__new__:[274,3,1,"","Constructs from the JSON representation."],__repr__:[275,3,1,"","Returns a string representation based on the JSON representation."],chunk_layout:[276,5,1,"","Effective chunk layout, including any constraints implied\nby driver-specific options."],codec:[277,5,1,"","Effective codec, including any constraints implied\nby driver-specific options."],copy:[278,3,1,"","Returns a copy of the spec."],dimension_units:[279,5,1,"","Effective physical units of each dimension of the domain, including any\nconstraints implied by driver-specific options."],domain:[280,5,1,"","Effective index domain, including any constraints implied\nby driver-specific options."],dtype:[281,5,1,"","Data type, or None if unspecified."],fill_value:[282,5,1,"","Effective fill value, including any constraints implied by driver-specific\noptions."],kvstore:[283,5,1,"","Spec of the associated key-value store used as the underlying storage."],ndim:[284,5,1,"","Alias for rank."],oindex:[285,3,1,"","Transforms the spec using NumPy-style indexing with outer indexing semantics."],origin:[286,5,1,"","Inclusive lower bound of the domain."],rank:[287,5,1,"","Returns the rank of the domain, or None if unspecified."],schema:[288,5,1,"","Effective schema, including any constraints implied by driver-specific options."],shape:[289,5,1,"","Shape of the domain."],size:[290,5,1,"","Total number of elements in the domain."],to_json:[291,3,1,"","Converts to the JSON representation."],transform:[292,5,1,"","The index transform, or None if unspecified."],update:[293,3,1,"","Adds additional constraints or changes the open mode."],vindex:[294,3,1,"","Transforms the spec using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.Spec.__getitem__(domain)":{domain:[270,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.Spec.__getitem__(transform)":{transform:[273,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.Spec.update":{assume_metadata:[293,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[293,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[293,4,2,"p-codec","Constrains the codec."],context:[293,4,2,"p-context","Bind any context resource specs using the specified shared resource context."],create:[293,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[293,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[293,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[293,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[293,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[293,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[293,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[293,4,2,"p-open","Allow opening an existing TensorStore."],rank:[293,4,2,"p-rank","Constrains the rank of the TensorStore."],schema:[293,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[293,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],strip_context:[293,4,2,"p-strip_context","Replace any bound context resources and unbound context resource specs by\ndefault context resource specs."],unbind_context:[293,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore":{"__getitem__(domain)":[298,3,1,"","Computes a virtual view using an explicit index domain."],"__getitem__(expr)":[299,3,1,"","Computes a virtual view using a dimension expression."],"__getitem__(indices)":[300,3,1,"","Computes a virtual view using NumPy-style indexing with default index array semantics."],"__getitem__(transform)":[301,3,1,"","Computes a virtual view using an explicit index transform."],"__setitem__(domain)":[302,3,1,"","Synchronously writes using an explicit index domain."],"__setitem__(expr)":[303,3,1,"","Synchronously writes using a dimension expression."],"__setitem__(indices)":[304,3,1,"","Synchronously writes using NumPy-style indexing with default index array semantics."],"__setitem__(transform)":[305,3,1,"","Synchronously writes using an explicit index transform."],T:[296,5,1,"","View with transposed domain (reversed dimension order)."],__array__:[297,3,1,"","Automatic conversion to numpy.ndarray for interoperability with NumPy."],astype:[306,3,1,"","Returns a read/write view as the specified data type."],chunk_layout:[307,5,1,"","Chunk layout of the TensorStore."],codec:[308,5,1,"","Data codec spec."],dimension_units:[309,5,1,"","Physical units of each dimension of the domain."],domain:[310,5,1,"","Domain of the array."],dtype:[311,5,1,"","Data type of the array."],fill_value:[312,5,1,"","Fill value for positions not yet written."],kvstore:[313,5,1,"","Associated key-value store used as the underlying storage."],mode:[314,5,1,"","Read/write mode."],ndim:[315,5,1,"","Alias for rank."],oindex:[316,3,1,"","Computes a virtual view using NumPy-style indexing with outer indexing semantics."],origin:[318,5,1,"","Inclusive lower bound of the domain."],rank:[319,5,1,"","Number of dimensions in the domain."],read:[320,3,1,"","Reads the data within the current domain."],readable:[321,5,1,"","Indicates if reading is supported."],resolve:[322,3,1,"","Obtains updated bounds, subject to the cache policy."],schema:[323,5,1,"","Schema of this TensorStore."],shape:[324,5,1,"","Shape of the domain."],size:[325,5,1,"","Total number of elements in the domain."],spec:[326,3,1,"","Spec that may be used to re-open or re-create the TensorStore."],transaction:[327,5,1,"","Associated transaction used for read/write operations."],vindex:[328,3,1,"","Computes a virtual view using NumPy-style indexing with vectorized indexing semantics."],with_transaction:[330,3,1,"","Returns a transaction-bound view of this TensorStore."],writable:[331,5,1,"","Indicates if writing is supported."],write:[332,3,1,"","Writes to the current domain."]},"tensorstore.TensorStore.__getitem__(domain)":{domain:[298,4,2,"p-domain","Index domain, must have dimension labels that can be\naligned to self.domain."]},"tensorstore.TensorStore.__getitem__(transform)":{transform:[301,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(domain)":{source:[302,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[302,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.__setitem__(indices)":{indices:[304,4,2,"p-indices","NumPy-style indexing terms."],source:[304,4,2,"p-source","Source array, broadcast-compatible with\nself[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.__setitem__(transform)":{source:[305,4,2,"p-source","Source array, broadcast-compatible with\nself.domain[transform] and with a data type convertible to\nself.dtype."],transform:[305,4,2,"p-transform","Index transform, transform.output_rank must equal\nself.rank."]},"tensorstore.TensorStore.oindex":{__setitem__:[317,3,1,"","Synchronously writes using NumPy-style indexing with outer indexing semantics."]},"tensorstore.TensorStore.oindex.__setitem__":{indices:[317,4,2,"p-indices","NumPy-style indexing terms."],source:[317,4,2,"p-source","Source array, broadcast-compatible with\nself.oindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.read":{order:[320,4,2,"p-order","Contiguous layout order of the returned array:"]},"tensorstore.TensorStore.spec":{assume_metadata:[326,4,2,"p-assume_metadata","Skip reading the metadata if possible."],create:[326,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[326,4,2,"p-delete_existing","Delete any existing data before creating a new array."],minimal_spec:[326,4,2,"p-minimal_spec","Indicates whether to include in the returned Spec the\nmetadata necessary to re-create the TensorStore."],open:[326,4,2,"p-open","Allow opening an existing TensorStore."],retain_context:[326,4,2,"p-retain_context","Retain all bound context resources (e.g."],unbind_context:[326,4,2,"p-unbind_context","Convert any bound context resources to context resource specs that fully capture\nthe graph of shared context resources and interdependencies."]},"tensorstore.TensorStore.vindex":{__setitem__:[329,3,1,"","Synchronously writes using NumPy-style indexing with vectorized indexing semantics."]},"tensorstore.TensorStore.vindex.__setitem__":{indices:[329,4,2,"p-indices","NumPy-style indexing terms."],source:[329,4,2,"p-source","Source array, broadcast-compatible with\nself.vindex[indices].domain and with a data type convertible to\nself.dtype."]},"tensorstore.TensorStore.write":{source:[332,4,2,"p-source","Source array, broadcast-compatible with\nself.domain and with a data type convertible to\nself.dtype."]},"tensorstore.Transaction":{__init__:[334,3,1,"","Creates a new transaction."],abort:[335,3,1,"","Aborts the transaction."],aborted:[336,5,1,"","Indicates whether the transaction has been aborted."],atomic:[337,5,1,"","Indicates whether the transaction is atomic."],commit_async:[338,3,1,"","Asynchronously commits the transaction."],commit_started:[339,5,1,"","Indicates whether the commit of the transaction has already started."],commit_sync:[340,3,1,"","Synchronously commits the transaction."],future:[341,5,1,"","Commit result future."],open:[342,5,1,"","Indicates whether the transaction is still open."]},"tensorstore.Unit":{"__init__(components)":[345,3,1,"","Constructs a unit from a multiplier and base unit."],"__init__(json)":[346,3,1,"","Constructs a unit from its JSON representation."],"__init__(multiplier)":[347,3,1,"","Constructs a dimension-less quantity of the specified value."],"__init__(pair)":[348,3,1,"","Constructs a unit from a multiplier and base unit pair."],"__init__(unit)":[349,3,1,"","Constructs a unit from a string."],__eq__:[344,3,1,"","Compares two units for equality."],__mul__:[350,3,1,"","Multiplies this unit by the specified multiplier."],__truediv__:[351,3,1,"","Divides this unit by the specified divisor."],base_unit:[352,5,1,"","Base unit from which this unit is derived."],multiplier:[353,5,1,"","Multiplier for the base_unit."],to_json:[354,3,1,"","Converts to the JSON representation."]},"tensorstore.VirtualChunkedReadParameters":{if_not_equal:[356,5,1,"","Cached generation, read request can be skipped if no newer data is available."],staleness_bound:[357,5,1,"","Read may be fulfilled with cached data no older than the specified bound."]},"tensorstore.VirtualChunkedWriteParameters":{if_equal:[359,5,1,"","If non-empty, writeback should be conditioned on the existing data matching the specified generation."]},"tensorstore.WriteFutures":{add_done_callback:[361,3,1,"",""],cancel:[362,3,1,"",""],cancelled:[363,3,1,"",""],commit:[364,5,1,"",""],copy:[365,5,1,"",""],done:[366,3,1,"",""],exception:[367,3,1,"",""],remove_done_callback:[368,3,1,"",""],result:[369,3,1,"",""]},"tensorstore.array":{array:[370,4,2,"p-array","Source array."],context:[370,4,2,"p-context","Context to use."],dtype:[370,4,2,"p-dtype","Data type to which array will be converted."]},"tensorstore.d":{__class_getitem__:[377,3,1,"","Constructs from a sequence of dimension indices, ranges, and/or labels."]},"tensorstore.dtype":{"__init__(dtype)":[382,3,1,"","Construct from an existing TensorStore or NumPy data type."],"__init__(name)":[383,3,1,"","Construct by name."],__call__:[381,3,1,"","Construct a scalar instance of this data type"],name:[384,5,1,"",""],numpy_dtype:[385,5,1,"",""],to_json:[386,3,1,"",""],type:[387,5,1,"",""]},"tensorstore.open":{assume_metadata:[398,4,2,"p-assume_metadata","Skip reading the metadata if possible."],chunk_layout:[398,4,2,"p-chunk_layout","Constrains the chunk layout."],codec:[398,4,2,"p-codec","Constrains the codec."],context:[398,4,2,"p-context","Shared resource context."],create:[398,4,2,"p-create","Allow creating a new TensorStore."],delete_existing:[398,4,2,"p-delete_existing","Delete any existing data before creating a new array."],dimension_units:[398,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[398,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[398,4,2,"p-dtype","Constrains the data type of the TensorStore."],fill_value:[398,4,2,"p-fill_value","Specifies the fill value for positions that have not been written."],kvstore:[398,4,2,"p-kvstore","Sets the associated key-value store used as the underlying storage."],open:[398,4,2,"p-open","Allow opening an existing TensorStore."],rank:[398,4,2,"p-rank","Constrains the rank of the TensorStore."],read:[398,4,2,"p-read","Allow read access."],schema:[398,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[398,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],spec:[398,4,2,"p-spec","TensorStore Spec to open."],transaction:[398,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write:[398,4,2,"p-write","Allow write access."]},"tensorstore.virtual_chunked":{chunk_layout:[405,4,2,"p-chunk_layout","Constrains the chunk layout."],context:[405,4,2,"p-context","Shared resource context."],dimension_units:[405,4,2,"p-dimension_units","Specifies the physical units of each dimension of the domain."],domain:[405,4,2,"p-domain","Constrains the domain of the TensorStore."],dtype:[405,4,2,"p-dtype","Constrains the data type of the TensorStore."],loop:[405,4,2,"p-loop","Event loop on which to execute read_function and/or\nwrite_function if they are\nasync functions."],rank:[405,4,2,"p-rank","Constrains the rank of the TensorStore."],read_function:[405,4,2,"p-read_function","Callback that handles chunk read requests."],schema:[405,4,2,"p-schema","Additional schema constraints to merge with existing constraints."],shape:[405,4,2,"p-shape","Constrains the shape and origin of the TensorStore."],transaction:[405,4,2,"p-transaction","Transaction to use for opening/creating, and for subsequent operations."],write_function:[405,4,2,"p-write_function","Callback that handles chunk write requests."]},ChunkLayout:{chunk:[408,1,2,"json-ChunkLayout.chunk","Combined constraints on write/read/codec chunks."],codec_chunk:[408,1,2,"json-ChunkLayout.codec_chunk","Constraints on the chunk grid used by the codec, if applicable."],grid_origin:[408,1,2,"json-ChunkLayout.grid_origin","Specifies hard constraints on the origin of the chunk grid."],grid_origin_soft_constraint:[408,1,2,"json-ChunkLayout.grid_origin_soft_constraint","Specifies preferred values for the origin of the chunk grid rather than\nhard constraints."],inner_order:[408,1,2,"json-ChunkLayout.inner_order","Permutation specifying the element storage order within the innermost\nchunks."],inner_order_soft_constraint:[408,1,2,"json-ChunkLayout.inner_order_soft_constraint","Specifies a preferred value for inner_order rather than a\nhard constraint.  If inner_order is also specified, it\ntakes precedence."],rank:[408,1,2,"json-ChunkLayout.rank","Number of dimensions."],read_chunk:[408,1,2,"json-ChunkLayout.read_chunk","Constraints on the chunk grid over which reads may be efficiently\npartitioned."],write_chunk:[408,1,2,"json-ChunkLayout.write_chunk","Constraints on the chunk grid over which writes may be efficiently\npartitioned."]},Codec:{driver:[408,1,2,"json-Codec.driver","Driver identifier"]},Context:{"&lt;resource-type&gt;":[0,1,2,"json-Context.<resource-type>",null],"&lt;resource-type&gt;#&lt;id&gt;":[0,1,2,"json-Context.<resource-type>#<id>",null],cache_pool:[0,0,1,"json-Context.cache_pool",""],data_copy_concurrency:[0,0,1,"json-Context.data_copy_concurrency",""],file_io_concurrency:[0,0,1,"json-Context.file_io_concurrency",""],gcs_request_concurrency:[18,0,1,"json-Context.gcs_request_concurrency",""],gcs_request_retries:[18,0,1,"json-Context.gcs_request_retries",""],gcs_user_project:[18,0,1,"json-Context.gcs_user_project",""],http_request_concurrency:[19,0,1,"json-Context.http_request_concurrency",""],http_request_retries:[19,0,1,"json-Context.http_request_retries",""],memory_key_value_store:[21,0,1,"json-Context.memory_key_value_store",""]},DownsampleMethod:{max:[3,1,2,"json-DownsampleMethod.max",""],mean:[3,1,2,"json-DownsampleMethod.mean",""],median:[3,1,2,"json-DownsampleMethod.median",""],min:[3,1,2,"json-DownsampleMethod.min",""],mode:[3,1,2,"json-DownsampleMethod.mode",""],stride:[3,1,2,"json-DownsampleMethod.stride",""]},IndexDomain:{exclusive_max:[15,1,2,"json-IndexDomain.exclusive_max","Exclusive upper bounds of the domain."],inclusive_max:[15,1,2,"json-IndexDomain.inclusive_max","Inclusive upper bounds of the domain."],inclusive_min:[15,1,2,"json-IndexDomain.inclusive_min","Inclusive lower bounds of the domain."],labels:[15,1,2,"json-IndexDomain.labels","Dimension labels for each dimension."],rank:[15,1,2,"json-IndexDomain.rank","Number of dimensions."],shape:[15,1,2,"json-IndexDomain.shape","Extent of each dimension of the domain."]},IndexTransform:{input_exclusive_max:[15,1,2,"json-IndexTransform.input_exclusive_max","Exclusive upper bounds of the input domain."],input_inclusive_max:[15,1,2,"json-IndexTransform.input_inclusive_max","Inclusive upper bounds of the input domain."],input_inclusive_min:[15,1,2,"json-IndexTransform.input_inclusive_min","Inclusive lower bounds of the input domain."],input_labels:[15,1,2,"json-IndexTransform.input_labels","Dimension labels for each input domain dimension."],input_rank:[15,1,2,"json-IndexTransform.input_rank","Number of input dimensions."],input_shape:[15,1,2,"json-IndexTransform.input_shape","Extent of each dimension of the input domain."],output:[15,1,2,"json-IndexTransform.output","Specifies the output index map for each output dimension."]},KeyValueStoreBackedChunkDriver:{assume_metadata:[7,1,2,"json-KeyValueStoreBackedChunkDriver.assume_metadata",""],cache_pool:[7,1,2,"json-KeyValueStoreBackedChunkDriver.cache_pool",""],context:[7,1,2,"json-KeyValueStoreBackedChunkDriver.context","Specifies context resources that augment/override the parent context."],create:[7,1,2,"json-KeyValueStoreBackedChunkDriver.create",""],data_copy_concurrency:[7,1,2,"json-KeyValueStoreBackedChunkDriver.data_copy_concurrency",""],delete_existing:[7,1,2,"json-KeyValueStoreBackedChunkDriver.delete_existing",""],driver:[7,1,2,"json-KeyValueStoreBackedChunkDriver.driver","Driver identifier"],dtype:[7,1,2,"json-KeyValueStoreBackedChunkDriver.dtype","Specifies the data type."],kvstore:[7,1,2,"json-KeyValueStoreBackedChunkDriver.kvstore",""],open:[7,1,2,"json-KeyValueStoreBackedChunkDriver.open",""],path:[7,1,2,"json-KeyValueStoreBackedChunkDriver.path","Additional path within the KvStore specified by\nkvstore."],rank:[7,1,2,"json-KeyValueStoreBackedChunkDriver.rank","Specifies the rank of the TensorStore."],recheck_cached_data:[7,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_data",""],recheck_cached_metadata:[7,1,2,"json-KeyValueStoreBackedChunkDriver.recheck_cached_metadata",""],schema:[7,1,2,"json-KeyValueStoreBackedChunkDriver.schema","Specifies constraints on the schema."],transform:[7,1,2,"json-KeyValueStoreBackedChunkDriver.transform","Specifies a transform."]},KvStore:{context:[20,1,2,"json-KvStore.context",""],driver:[20,1,2,"json-KvStore.driver","Key-value store driver identifier"],path:[20,1,2,"json-KvStore.path","Key prefix within the key-value store."]},OutputIndexMap:{index_array:[15,1,2,"json-OutputIndexMap.index_array","If present, indicates that this output dimension uses an index\narray map, with the index array specified as a nested list of rank\nequal to the input_rank."],index_array_bounds:[15,1,2,"json-OutputIndexMap.index_array_bounds",""],input_dimension:[15,1,2,"json-OutputIndexMap.input_dimension","If present, indicates that this output dimension uses a single\ninput dimension map with the specified input dimension.  Must not\nbe specified in conjunction with index_array."],offset:[15,1,2,"json-OutputIndexMap.offset","Specifies an offset for this output dimension.  If neither\ninput_dimension nor index_array is\nspecified, this specifies the constant value to which this output\ndimension maps."],stride:[15,1,2,"json-OutputIndexMap.stride","Multiplier for the input index specified by\ninput_dimension or the index array value specified by\nindex_array."]},Schema:{chunk_layout:[408,1,2,"json-Schema.chunk_layout","Data storage layout constraints."],codec:[408,1,2,"json-Schema.codec",""],dimension_units:[408,1,2,"json-Schema.dimension_units","Physical units of each dimension."],domain:[408,1,2,"json-Schema.domain","Domain of the TensorStore, including bounds and optional dimension labels."],dtype:[408,1,2,"json-Schema.dtype","Specifies the data type of the TensorStore."],fill_value:[408,1,2,"json-Schema.fill_value","Fill value to use for missing data."],rank:[408,1,2,"json-Schema.rank","Number of dimensions."]},TensorStore:{context:[409,1,2,"json-TensorStore.context","Specifies context resources that augment/override the parent context."],driver:[409,1,2,"json-TensorStore.driver","Driver identifier"],dtype:[409,1,2,"json-TensorStore.dtype","Specifies the data type."],rank:[409,1,2,"json-TensorStore.rank","Specifies the rank of the TensorStore."],schema:[409,1,2,"json-TensorStore.schema","Specifies constraints on the schema."],transform:[409,1,2,"json-TensorStore.transform","Specifies a transform."]},dtype:{"byte":[409,1,2,"json-dtype.byte","Single byte."],"char":[409,1,2,"json-dtype.char","Single byte, interpreted as an ASCII character."],bfloat16:[409,1,2,"json-dtype.bfloat16","bfloat16 floating-point format number."],bool:[409,1,2,"json-dtype.bool","Boolean value (0 or 1)."],complex128:[409,1,2,"json-dtype.complex128","Complex number, where the real and imaginary components are each\nrepresented by a float64."],complex64:[409,1,2,"json-dtype.complex64","Complex number, where the real and imaginary components are each\nrepresented by a float32."],float16:[409,1,2,"json-dtype.float16","IEEE 754 binary16\nhalf-precision floating-point number."],float32:[409,1,2,"json-dtype.float32","IEEE 754 binary32\nsingle-precision floating-point number."],float64:[409,1,2,"json-dtype.float64","IEEE 754 binary64\ndouble-precision floating-point number."],int16:[409,1,2,"json-dtype.int16","16-bit signed two's-complement integer."],int32:[409,1,2,"json-dtype.int32","32-bit signed two's-complement integer."],int64:[409,1,2,"json-dtype.int64","64-bit signed two's-complement integer."],int8:[409,1,2,"json-dtype.int8","8-bit signed two's-complement integer."],json:[409,1,2,"json-dtype.json","JSON value."],string:[409,1,2,"json-dtype.string","Byte string."],uint16:[409,1,2,"json-dtype.uint16","16-bit unsigned integer."],uint32:[409,1,2,"json-dtype.uint32","32-bit unsigned integer."],uint64:[409,1,2,"json-dtype.uint64","64-bit unsigned integer."],uint8:[409,1,2,"json-dtype.uint8","8-bit unsigned integer."],ustring:[409,1,2,"json-dtype.ustring","Unicode string (represented in memory as UTF-8)."]},tensorstore:{"downsample(spec)":[378,7,1,"","Returns a virtual downsampled view view of a Spec."],"downsample(store)":[379,7,1,"","Returns a virtual downsampled view of a TensorStore."],ChunkLayout:[23,2,1,"","Describes the storage layout of a tensorstore.TensorStore."],CodecSpec:[54,2,1,"","Specifies driver-specific encoding/decoding parameters."],Context:[57,2,1,"","Manages shared TensorStore context resources, such as caches and credentials."],Dim:[69,2,1,"","1-d index interval with optionally-implicit bounds and dimension label."],DimExpression:[93,2,1,"","Specifies an advanced indexing operation."],Future:[104,2,1,"","Handle for consuming the result of an asynchronous operation."],FutureLike:[114,2,1,"","Abstract base class for types representing an asynchronous result."],IndexDomain:[115,2,1,"","Domain (including bounds and optional dimension labels) of an N-dimensional index space."],IndexTransform:[141,2,1,"","Represents a transform from an input index space to an output space."],Indexable:[171,2,1,"","Abstract base class for types that support TensorStore indexing operations."],KvStore:[172,2,1,"","Key-value store that maps an ordered set of byte string keys to byte string values."],OutputIndexMap:[215,2,1,"","Represents an output index map for an index transform."],OutputIndexMaps:[225,2,1,"","View of the output index maps for an index transform."],OutputIndexMethod:[229,2,1,"","Indicates the output index method of an OutputIndexMap."],Promise:[237,2,1,"","Handle for producing the result of an asynchronous operation."],Schema:[241,2,1,"","Driver-independent options for defining a TensorStore schema."],Spec:[267,2,1,"","Specification for opening or creating a TensorStore."],TensorStore:[295,2,1,"","Asynchronous multi-dimensional array handle."],Transaction:[333,2,1,"","Transactions are used to stage a group of modifications (e.g. writes to\ntensorstore.TensorStore objects) in memory, and then either commit the\ngroup all at once or abort it."],Unit:[343,2,1,"","Specifies a physical quantity/unit."],VirtualChunkedReadParameters:[355,2,1,"","Options passed to read callbacks used with virtual_chunked."],VirtualChunkedWriteParameters:[358,2,1,"","Options passed to write callbacks used with virtual_chunked."],WriteFutures:[360,2,1,"","Handle for consuming the result of an asynchronous write operation."],array:[370,7,1,"","Returns a TensorStore that reads/writes from an in-memory array."],bfloat16:[371,8,1,"","bfloat16 floating-point data type."],bool:[372,8,1,"","Boolean data type (0 or 1).  Corresponds to the python:bool type and numpy.bool_."],cast:[373,7,1,"","Returns a read/write view as the specified data type."],complex128:[374,8,1,"","Complex number based on float64.  Corresponds to numpy.complex128."],complex64:[375,8,1,"","Complex number based on float32.  Corresponds to numpy.complex64."],d:[376,2,1,"","Specifies a dimension selection, for starting a dimension expression."],dtype:[380,2,1,"","TensorStore data type representation."],float16:[388,8,1,"","IEEE 754 binary16 half-precision floating-point data type.  Correspond to numpy.float16."],float32:[389,8,1,"","IEEE 754 binary32 single-precision floating-point data type.  Corresponds to numpy.float32."],float64:[390,8,1,"","IEEE 754 binary64 double-precision floating-point data type.  Corresponds to numpy.float64."],inf:[391,8,1,"","Special constant equal to 2^{62}-1 that indicates an unbounded index domain."],int16:[392,8,1,"","16-bit signed two's-complement integer data type.  Corresponds to numpy.int16."],int32:[393,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int32."],int64:[394,8,1,"","32-bit signed two's-complement integer data type.  Corresponds to numpy.int64."],int8:[395,8,1,"","8-bit signed two's-complement integer data type.  Corresponds to numpy.int8."],json:[396,8,1,"","JSON data type.  Corresponds to an arbitrary Python JSON value."],newaxis:[397,8,1,"","Alias for None used in indexing expressions to specify a new singleton dimension."],open:[398,7,1,"","Opens or creates a TensorStore from a Spec."],string:[399,8,1,"","Variable-length byte string data type.  Corresponds to the Python python:bytes type."],uint16:[400,8,1,"","16-bit unsigned integer.  Corresponds to numpy.uint16."],uint32:[401,8,1,"","32-bit unsigned integer.  Corresponds to numpy.uint32."],uint64:[402,8,1,"","64-bit unsigned integer data type.  Corresponds to numpy.uint64."],uint8:[403,8,1,"","8-bit unsigned integer.  Corresponds to numpy.uint8."],ustring:[404,8,1,"","Variable-length Unicode string data type.  Corresponds to the Python python:str type."],virtual_chunked:[405,7,1,"","Creates a TensorStore where the content is read/written chunk-wise by an arbitrary function."]}},objnames:{"0":["json","schema","JSON type"],"1":["json","subschema","JSON member"],"2":["py","class","Python class"],"3":["py","method","Python method"],"4":["py","parameter","Python parameter"],"5":["py","property","Python property"],"6":["py","attribute","Python attribute"],"7":["py","function","Python function"],"8":["py","data","Python data"],"9":["std","envvar","environment variable"]},objtypes:{"0":"json:schema","1":"json:subschema","2":"py:class","3":"py:method","4":"py:parameter","5":"py:property","6":"py:attribute","7":"py:function","8":"py:data","9":"std:envvar"},terms:{"0":[0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,22,39,44,46,47,50,51,75,79,85,89,94,95,96,97,98,99,100,101,102,103,104,116,117,118,119,120,121,122,127,132,143,144,145,146,147,148,149,150,152,163,169,170,206,215,216,217,218,229,233,244,245,246,247,248,249,251,255,259,261,264,266,270,271,272,273,280,285,288,291,292,293,294,295,298,299,300,301,302,303,304,305,306,307,308,310,316,317,320,323,326,328,329,332,333,354,372,373,377,397,398,405,406,407,408,409],"05":16,"098695591f3a":16,"0x":407,"0x8":[398,407],"1":[0,1,3,9,10,11,12,15,16,18,19,22,39,44,46,47,50,51,69,70,71,77,82,83,85,86,87,88,89,90,94,95,96,97,98,99,100,101,102,103,104,116,117,118,119,120,126,127,130,131,132,133,134,136,138,139,142,143,144,145,146,147,148,149,150,155,156,157,158,159,163,166,169,170,217,218,229,235,242,244,245,246,247,248,249,251,254,259,261,264,266,268,272,273,279,288,291,292,295,296,298,299,300,301,303,304,305,306,307,308,309,315,316,317,319,323,326,328,329,332,333,343,347,349,372,373,377,391,397,398,405,406,407,408,409],"10":[12,15,16,17,67,68,69,70,71,72,73,74,75,80,82,83,84,88,89,94,99,100,101,116,123,132,144,169,245,246,259,266,271,272,285,294,295,297,299,300,302,303,304,316,317,320,328,329,332,398,406],"100":[5,9,10,12,15,49,50,53,124,135,137,244,245,246,247,255,259,266,276,284,287,288,291,292,293,308,309,312,313,323,405,407],"1000":[9,10,12,244,245,246,247,259,266,280,288,295,307,398,407],"10000":10,"1000000":50,"10000000":[0,59,63,67,68,398],"100000000":[0,405,407],"1000000000":10,"100_000_000":407,"100kb":9,"100mb":[405,407],"100x100x1":407,"101":405,"102":[9,12,307,398,405,407],"1020":10,"103":405,"104":405,"1049":295,"105":[49,53,291,292,405],"106":405,"11":[12,16,74,82,94,117,150,217,218,406],"1113":10,"1132030694":407,"1161117856":407,"1194100437":407,"12":[12,15,16,94,99,100,117,320,406],"1264":10,"128":[9,12],"13":[12,100,117,169,218],"14":[12,16,101,120],"1408314276":407,"1414":398,"15":[10,16,75,101,398,406,407],"15000":407,"15100":407,"159":[9,10,12],"16":[16,22,100,392,400,409],"17":[16,99,123,150],"18":100,"1nm":[10,408],"1s":[18,19],"2":[1,3,8,9,10,11,12,15,16,19,22,46,47,50,69,77,94,95,96,97,98,99,100,101,102,103,104,116,117,118,119,120,121,126,127,128,129,130,131,132,133,134,136,138,139,143,144,145,146,148,149,150,153,154,155,156,157,158,159,163,169,170,217,218,229,232,244,245,246,247,248,249,251,253,259,261,264,266,273,284,287,288,292,295,300,301,303,304,305,306,307,315,316,317,319,326,328,329,332,333,350,351,373,377,391,397,398,405,406,407,408],"20":[10,15,84,94,99,100,101,246,259,266,272,285,294,297,300,316,328],"200":[9,10,12,49,50,53,124,135,137,244,245,246,247,255,259,266,276,279,284,287,288,291,292,293,309,313],"2000":[9,10,12,244,245,246,247,259,266,280,288,307,398],"20000":[295,407],"2000000":[9,10,12],"2019":16,"2030":10,"2048":10,"206":[49,53],"207":[49,53],"20base":19,"20data":19,"21":[16,406],"23":100,"25":101,"28":100,"29":16,"3":[1,3,4,5,6,9,10,11,12,15,16,19,46,47,69,77,85,90,92,94,95,96,97,98,99,100,101,102,103,104,105,116,117,118,119,120,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,166,169,170,217,243,244,245,246,247,248,249,253,254,256,258,259,261,264,265,266,272,273,285,288,294,300,301,303,305,306,315,316,319,328,329,333,344,345,346,347,348,350,351,352,353,354,373,377,397,398,405,406,407],"30":[10,94,310],"300":[9,10,12,49,53,124,135,137,244,245,246,247,255,259,266,276,279,288,293],"3000":[9,10,12,244,245,246,247,259,266,280,288,307,398],"300000":349,"30037":16,"3040":10,"307":[49,53],"32":[1,2,3,7,9,10,11,12,13,15,18,19,22,393,394,401,408,409],"34432":[10,398,407],"34452":10,"357":406,"37":16,"39552":[10,398,407],"39582":10,"3e5":349,"3nm":[254,344,354],"4":[0,1,3,9,10,11,12,15,70,77,83,88,94,97,99,100,101,102,103,116,118,119,120,126,127,128,129,130,131,132,133,134,136,138,139,144,148,149,150,152,153,154,155,156,157,158,159,160,161,162,166,169,247,254,273,301,304,305,315,319,329,333,349,373,398,405,406,407,408],"40":[9,10],"40000":10,"40nm":10,"41408":[398,407],"42":[8,12,105,243,257,282,295,302,312,323,332,333,398,405],"43":333,"44":333,"4443":18,"45":333,"4611686018427387903":[22,88,89,391],"4611686018427387904":[82,83],"48":16,"486000":408,"4_4_40":10,"4nm":[10,254,349,408],"5":[1,9,11,12,15,16,49,53,70,71,72,73,74,75,77,79,80,82,83,84,85,86,87,88,89,90,92,94,97,98,99,100,101,102,103,116,117,118,119,120,121,122,126,127,128,129,130,131,132,133,134,136,138,139,144,145,147,149,150,152,153,154,155,156,157,158,159,160,161,162,166,216,217,218,237,239,240,244,245,246,247,250,259,266,270,271,272,273,285,291,292,294,295,297,298,299,300,301,302,303,304,305,308,309,315,316,317,319,320,323,326,328,329,332,333,345,346,347,348,351,353,373,397,398,405,406,407,408],"50":[310,405],"500":[9,10,12],"50000":10,"5000000":[65,67,68],"512":10,"51508":10,"51548":10,"5813054053":407,"5e":408,"5nm":[309,350,352,353],"6":[1,3,4,9,10,11,12,15,16,49,53,71,77,94,97,98,99,100,101,103,116,117,118,119,120,122,126,127,128,129,132,133,144,146,149,153,154,155,163,170,244,245,246,270,271,272,295,298,299,300,301,302,303,304,305,315,317,319,329,332,333,398,405,406,407,408],"60":[139,270,271,298,299,302,303,328,408],"62":[15,22,69,391],"632":10,"64":[9,10,12,15,22,398,402,407,409],"6654436a307a":16,"6901":8,"7":[15,16,49,53,92,94,99,116,117,120,123,130,132,144,146,148,149,150,156,163,169,170,217,218,259,266,285,294,316,328,350,406],"70":[270,271,272,273,285,294,297,298,299,300,301,302,303,304,305,310,311,316,317,320,326,328,329,332],"707":398,"7230":19,"75":[5,10],"754":[22,388,389,390,409],"77":[18,19],"79":[9,10,12],"7nm":351,"8":[0,10,11,15,16,22,94,98,99,100,116,117,120,123,126,132,144,146,147,148,150,155,163,169,170,244,259,266,270,285,294,295,298,302,304,309,316,317,320,328,329,332,395,398,403,406,407,409],"80":[270,271,272,273,285,294,297,298,299,300,301,302,303,304,305,310,311,316,317,320,326,328,329,332,407],"8000":19,"8080":19,"81":10,"82":407,"83":[16,407],"8_8_8":10,"8nm":309,"9":[3,9,10,12,15,16,72,94,116,120,132,144,218,244,245,270,271,298,299,302,303,304,398,406,407,408],"90":408,"9223372036854775807":92,"9223372036854775808":408,"9801a2c5d6c6":16,"99":407,"9m":408,"abstract":[14,22,114,141,171],"boolean":[7,9,10,12,21,22,97,163,259,285,316,317,372,409],"break":12,"byte":[0,9,12,22,172,173,180,184,195,198,201,206,355,356,358,359,399,409],"case":[3,12,13,15,16,18,19,98,99,100,101,116,132,141,144,175,178,209,301,406,408],"char":409,"class":[22,24,54,58,60,69,93,104,114,115,122,141,171,173,180,185,195,215,225,229,237,241,267,295,333,343,355,358,360,376,380,406],"default":[0,1,4,5,6,7,8,9,10,11,12,13,15,16,18,19,57,62,64,65,66,73,74,75,93,94,105,121,141,146,148,172,193,207,210,241,246,267,272,293,295,300,304,326,376,398,405,406,408],"do":[1,2,3,4,5,6,7,8,9,10,11,12,15,406,409],"export":16,"final":[10,39,51],"float":[22,24,26,28,29,37,39,51,104,110,113,195,197,199,209,343,345,347,348,350,351,353,355,357,360,367,369,371,388,389,390,405,408,409],"function":[3,10,15,22,115,405,407],"import":407,"int":[22,23,24,26,30,31,32,33,34,35,37,39,42,43,44,45,46,47,51,69,71,73,74,75,78,82,83,88,89,92,93,98,99,100,101,104,112,115,118,121,124,126,130,131,135,136,137,138,139,141,143,148,155,156,157,159,160,161,162,164,166,167,168,206,215,216,217,218,221,223,224,225,226,227,228,229,230,236,241,248,258,260,261,262,263,265,267,284,286,287,289,290,293,295,315,318,319,324,325,360,368,376,378,379,391,398,405,406],"long":11,"new":[0,1,2,3,4,5,6,7,8,11,14,15,22,65,66,94,95,96,98,99,100,101,108,115,119,120,172,193,210,214,237,238,239,240,244,245,246,247,248,251,254,259,265,266,270,271,272,273,285,293,294,308,323,326,333,334,397,405,406,407,408,409],"null":[0,10,12,399,404,408],"public":[18,407],"return":[3,7,8,9,10,12,15,22,58,59,60,62,63,64,65,66,69,79,80,81,94,96,97,98,99,100,101,102,103,104,105,110,113,115,118,119,120,124,125,140,141,143,151,169,172,173,176,185,186,188,189,190,201,202,204,205,206,209,213,214,225,227,228,241,244,245,246,247,250,251,253,259,266,267,270,271,272,273,275,278,285,287,294,295,297,298,299,300,301,306,313,314,320,326,330,332,338,340,370,373,378,379,398,405,408],"static":[172,207,237,238],"transient":[18,19,21],"true":[7,8,9,10,12,21,64,69,70,71,72,73,74,75,76,79,81,84,86,87,94,108,128,129,153,154,177,192,193,210,237,239,240,293,295,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,316,317,320,323,326,328,329,332,333,344,398,406,407],"while":[3,9,10,12,15,16,19,39,44,51,200,203,297,343,399,404,405,406,407,408],A:[0,9,10,12,17,94,102,209,237,248,254,265,293,309,320,343,376,398,405,406,408],As:[9,12,15,94,118,175,178,371,406],At:[15,121,148,406],By:[12,15,16,172,207,326,398,405],For:[3,8,9,10,11,12,14,15,16,18,19,49,53,98,117,141,297,332,360,405,408],If:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,19,20,21,39,44,45,49,51,53,77,82,83,88,89,92,95,96,98,99,100,101,102,104,105,107,110,113,116,119,121,132,144,148,149,193,200,201,203,205,206,209,214,244,245,246,247,248,259,265,266,270,271,272,273,285,293,294,313,326,332,333,349,358,359,398,405,406,408,409],In:[3,12,13,15,18,19,20,21,72,132,175,179,301,333,343,360,406,407,408],It:[1,3,4,5,6,7,8,9,10,11,12,15,16,21,94,116,144,293,343,398,406,408],No:[9,12],On:[12,13,16,18,116,144],One:[0,3,7,9,12,409],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,39,49,51,53,63,69,85,90,95,96,98,99,100,101,104,110,113,114,115,116,127,132,133,141,144,147,149,172,186,193,200,201,203,205,209,210,213,214,243,244,248,254,265,267,269,270,292,293,298,309,310,312,326,330,332,333,342,343,360,398,399,404,405,406,408,409],There:[16,396,399,404,407,409],To:[3,7,9,10,12,14,16,18,64,186,207,293,300,326,398,405,406],With:[7,8,9,10,12],_:10,__add__:[185,186],__array__:[295,297,320],__call__:[141,143,380,381],__contains__:[69,70,71],__delitem__:[172,200,201,203,209,214],__eq__:[23,24,25,38,69,72,173,174,195,196,241,243,267,269,343,344],__getitem__:[57,63,93,94,97,103,115,116,117,118,119,120,141,144,145,146,147,163,170,172,200,201,203,209,225,226,241,244,245,246,247,259,266,267,270,271,272,273,285,294,295,298,299,300,301,303,316,328,376],__index__:406,__iter__:[69,77],__len__:[69,78,115,124,225,227],__mul__:[343,350],__repr__:[69,79,115,125,141,151,172,185,188,202,241,250,267,275],__setitem__:[172,200,201,203,209,214,295,302,303,304,305,317,329],__str__:[69,80,229,231],__truediv__:[185,186,189,343,351],_arrai:15,_bit:10,_dimens:15,_origin:15,_rank:15,_shape:15,a1:15,a2:15,aa:205,abc:[17,186,189,190,192,193,204,207,210,283,313],abort:[22,209,333,335,336,338,340,341,342],abov:[15,82,88,92,94,406],absolut:19,abstracteventloop:[105,405],access:[8,9,10,12,14,15,17,18,19,20,44,45,251,360,398,406,407],accomplish:332,accord:[9,10,12,15,16,116,144,172,173,175,179],account:[18,49,53,72,408],achiev:[9,12],acid:14,acknowledg:332,actual:[132,172,200,203,205,214,248,265,293,300,332,398,406,408],ad:[16,18,95,96,97,98,99,100,101,102,103,170,266,294,328,329],adapt:1,add:[16,23,24,37,51,94,241,265,267,293,406],add_done_callback:[104,106,111,360,361],addit:[3,7,8,9,10,12,13,15,16,18,19,20,23,24,37,51,72,93,94,185,189,241,248,265,267,293,333,342,343,360,398,405,406,408],addition:[15,16,69,193,207,254,293,333,405,406],address:13,advanc:[14,22,93,406],advantag:[14,332],advis:10,affect:[16,93,99,100,101,117,120,251,332,376,405,406,408],after:[7,8,9,10,12,16,209,248,265,293,332,349,360,398,405,406,408],ag:209,against:408,alia:[22,23,24,32,46,115,131,135,141,153,154,155,156,157,158,159,161,162,241,258,267,284,295,315,397],align:[16,116,144,244,270,298,302,329,332,408],all:[0,3,7,9,10,11,12,13,14,15,19,20,21,22,39,49,51,53,94,98,99,100,101,102,121,141,148,206,210,248,265,293,301,320,326,332,333,398,405,406,408,409],all_proxi:13,allow:[0,11,12,15,16,17,18,19,94,293,304,305,326,332,333,398,408],allus:18,along:[10,248,254,265,293,309,398,405,408],alreadi:[7,9,10,12,15,16,107,193,207,248,265,293,333,335,338,339,398,405],also:[1,2,3,7,9,10,11,12,14,15,16,17,39,51,69,72,93,94,98,99,100,101,172,207,248,265,293,304,313,332,333,360,371,398,405,406,407,408,409],altern:[13,332,406],alwai:[3,7,8,9,10,12,94,98,302,303,304,305,317,329,406,408],among:3,amount:[93,98,206,376,406],amplif:408,an:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,49,53,69,76,91,93,94,95,98,99,100,104,105,107,114,115,116,117,120,121,122,123,132,141,143,144,148,149,150,172,175,178,179,185,189,198,200,201,203,206,207,209,214,215,217,225,229,237,241,244,247,248,254,265,267,270,273,293,295,297,298,301,302,304,305,317,326,329,332,333,340,343,360,370,371,376,380,382,391,396,405,406,407,408,409],analog:14,ancestor:8,ani:[1,2,3,4,5,6,7,8,9,10,11,12,13,15,18,19,22,23,24,27,36,39,40,49,50,51,53,54,55,56,57,58,59,60,61,62,65,94,97,101,103,104,110,115,116,119,123,132,140,141,144,150,163,169,170,172,185,186,187,192,193,200,201,203,205,207,209,210,214,237,238,241,249,259,264,266,267,269,274,276,277,279,280,282,285,288,291,293,294,300,302,304,305,310,316,317,320,326,328,329,332,333,342,343,346,354,398,405,406,407,408,409],anoth:[0,69,70,72,85,90,115,116,127,133,141,144,147,173,174,241,243,267,269,405,406],api:[1,13,14,18],append:[19,185,186,200,201,203,209,214],appl:16,appli:[0,1,2,3,7,8,9,10,11,12,13,15,19,39,51,93,94,97,103,115,117,141,145,146,163,170,246,259,266,272,285,294,299,310,316,317,376,398,406,408,409],applic:[16,18,308,312,405,408],application_default_credenti:18,appropri:[18,405],aqacaamabaafaayaaaagqqaameeaaebbaabqqqaaye:12,ar:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,26,37,39,49,51,53,62,72,94,95,97,102,103,115,116,117,120,144,163,170,171,172,206,207,209,248,254,259,265,266,269,275,276,277,279,280,282,285,288,293,294,304,316,317,328,329,332,333,343,371,398,399,404,405,406,408,409],arbitrari:[9,15,19,22,396,405,406],archiv:16,aren:16,arg0:[225,226,380,381],arg:406,argument:406,arithmet:3,arr:132,arrai:[2,3,4,5,6,7,8,11,14,15,19,20,22,93,97,103,104,117,120,132,141,146,148,150,163,170,215,217,229,232,241,246,257,259,266,267,272,275,282,285,293,294,295,297,300,301,302,303,304,305,306,310,311,312,315,316,317,319,320,326,328,329,332,333,370,371,373,376,405,407,408,409],arrang:332,array_lik:[22,94,215,217,219,241,248,257,265,267,282,293,295,297,302,303,304,305,312,317,320,329,332,370,398,405,406],ascii:409,aspect:[24,26,28,29,37,39,51,408],aspect_ratio:[9,10,12,24,26,28,37,39,51,408],aspect_ratio_soft_constraint:[24,26,29,37,39,51,408],assert:[67,105,243,269,391],assign:[9,10,15,302,303,304,305,317,329,405,406,407],associ:[69,105,180,182,184,201,209,214,267,283,293,295,313,327,338,398],assum:[7,8,9,10,12,15,293,326,398,408],assume_metadata:[7,9,10,12,293,326],astyp:[295,306],async:[105,333,405,407],asynchron:[14,104,105,106,107,108,109,110,111,113,114,237,295,302,303,304,305,317,320,329,332,333,338,360,407],asyncio:[104,105,107,332,405,407],atom:[8,14,21,333,334,337,405],attempt:[8,18,19,398,405,406],attribut:[8,9,406],augment:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,409],auth:18,authent:[0,13],author:[13,18,19],automat:[1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,18,111,295,297,333,398,408,409],avail:[0,13,16,355,356,371],averag:3,avif:[7,409],avoid:[10,12,105,116,144,398,406],await:[104,105,172,202,204,205,207,208,209,210,212,213,214,295,297,298,299,300,301,307,308,309,310,311,312,313,316,320,323,326,328,332,333,373,398,405,406,407],awar:[12,406],ax:[9,292,298,299],b1:12,b:[8,16,72,102,116,144,147,172,177,181,190,198,200,201,203,204,205,206,207,209,213,214,243,253,269,278,398,406],back:[1,4,5,6,9,10,11,12,14,17,20,333,407],backoff:[18,19],backward:[7,8,9,10,12,93,99,376,406],bandwidth:14,base:[1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,22,114,171,172,185,188,191,202,208,241,243,250,267,269,275,293,306,326,343,345,348,352,373,374,375,378,379,398,406,408,409],base_unit:[343,345,347,349,352,353,408],base_url:19,basic:406,bazel:16,bazel_cach:16,bazel_tool:16,bazelisk:16,bazelisk_hom:16,bazelrc:16,bdist_wheel:16,bear:10,bearer:19,becaus:[8,10,332,405,406],becom:[110,113,205,332,341],been:[12,15,104,108,109,248,265,283,293,310,332,333,335,336,338,341,342,398,405],befor:[7,9,10,12,209,293,326,398],begin:[19,94,104,111,406],behav:117,behavior:[13,15,16,21,94,116,144,209,320,332,406],being:[7,8,9,10,12,16,209,333,405],below:[15,83,89,92,406],best:[9,10,12],better:[297,405],between:[15,18,398,405],bfloat16:[12,22,371,409],big:[9,12,409],bill:18,binari:16,binary16:[22,388,409],binary32:[22,389,409],binary64:[22,390,409],bind:[16,193,207,210,293,326,405],bit:[9,10,12,15,22,392,393,394,395,400,401,402,403,409],block:[3,9,10,12,17,105,110,113,200,201,203,297,302,303,304,305,317,320,329,332,333,405,408],blocksiz:[9,12,295,298,299,300,301,308,316,323,326,328,333,398,407],blosc:[9,12,16,295,298,299,300,301,308,316,323,326,328,398,408],blosclz:[9,12],bool:[3,12,22,23,24,25,36,38,39,51,54,56,58,59,60,62,69,70,71,72,73,74,75,76,81,84,86,87,94,104,107,108,109,115,121,128,129,141,148,153,154,172,173,174,177,185,192,193,195,196,210,241,243,264,267,269,291,293,295,321,322,326,331,333,334,336,337,339,342,343,344,360,362,363,366,372,398,406,409],bool_:[22,372],boringssl:16,both:[7,9,10,12,15,39,51,116,144,248,265,293,398,405,408],bound:[3,7,9,10,11,12,15,19,22,69,72,73,74,75,76,82,83,85,86,87,88,89,90,94,95,97,98,101,103,115,116,121,126,127,128,129,130,131,132,133,136,141,144,146,148,150,153,154,155,156,157,159,163,164,170,172,173,175,178,179,193,207,209,210,211,213,241,248,260,265,267,269,275,286,293,295,310,313,318,322,326,330,355,357,398,405,406,408],boundari:408,box:[115,127],broadcast:[12,94,103,170,244,248,265,266,270,293,294,298,302,304,305,312,317,328,329,332,398,406,408],broader:405,brotli:16,browser:19,bsd:13,bucket:[2,3,4,5,6,8,10,12,18,194,208,212,398,407],buffer:[3,12,405],bug:16,build:14,build_def:16,build_doc:16,build_ext:16,built:[13,16,371,406],bundl:[13,16],bz2:12,bzip2:[9,12,16],bzl:16,c16:12,c8:12,c:[1,14,17,39,44,51,94,102,205,276,288,295,300,301,316,320,326,328,398,406,408],c_rehash:13,cach:[0,7,8,9,10,12,14,16,22,57,209,210,295,320,322,326,332,355,356,357,398,407],cache_pool:[0,4,5,6,7,8,9,10,12,59,63,65,67,68,275,295,298,299,300,301,316,326,328,332,398,405,407],cacherevalidationbound:[7,8,9,10,12],cafil:[18,19],call:[64,94,104,105,108,111,119,200,201,203,209,239,247,251,300,320,332,335,338,405,406],callabl:[104,106,112,360,361,368,405],callback:[22,106,112,355,358,360,361,368,405],can:[7,9,10,12,13,14,15,16,18,132,206,244,248,254,265,270,293,298,326,332,333,355,356,398,405,406,407,408],cancel:[104,107,108,109,332,360,362,363],cancellederror:[107,108],cannot:[93,94,247,333],canon:408,capabl:[12,406],capath:[18,19],captur:[193,210,293,326],care:[10,398],cartesian:115,cast:[7,22,306,373,409],caus:[11,12,406],cc:205,cd:16,cdot:15,cert:[13,18,19],certain:[15,20],certif:16,chain:[94,406],chang:[15,16,93,96,209,267,293,333,376,406],channel:[10,398,407],charact:[16,19,409],characterist:398,check:[7,9,10,12,69,70,71,338,406],child:[67,68],choic:10,choos:408,chosen:[3,9,10,12,398],chunk:[14,22,24,25,26,28,29,30,31,34,35,37,38,39,41,44,48,49,51,52,53,241,248,251,265,267,276,288,293,295,300,301,307,316,326,328,332,398,405],chunk_aspect_ratio:[9,10,12,39,51,398],chunk_aspect_ratio_soft_constraint:[39,51],chunk_el:[9,12,39,51,398],chunk_elements_soft_constraint:[39,51],chunk_layout:[1,2,3,4,5,6,7,8,9,10,11,12,241,244,245,246,247,248,249,251,259,261,264,265,266,267,276,288,293,295,307,323,398,405,408,409],chunk_shap:[9,12,39,51,398],chunk_shape_soft_constraint:[39,51],chunk_siz:[10,398,407],chunklayout:[9,10,12,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,241,244,245,246,247,248,251,259,261,264,265,266,267,276,293,295,307,398,405,408],chunkss:408,circumst:7,cl:16,clang:16,clear:[39,51],clevel:[9,12,295,298,299,300,301,308,316,323,326,328,398,408],clone:16,close:[15,69,74],cloud:[14,18,20,332,398,407],cloudpickl:405,cloudsdk_config:18,cmake:16,cname:[9,12,295,298,299,300,301,308,316,323,326,328,398,408],coalesc:[332,333],code:16,codec:[11,23,24,39,41,51,241,248,252,265,267,277,288,293,295,308,323,398],codec_chunk:[9,10,12,23,39,41,51,408],codec_chunk_aspect_ratio:[39,51],codec_chunk_aspect_ratio_soft_constraint:[39,51],codec_chunk_el:[39,51],codec_chunk_elements_soft_constraint:[39,51],codec_chunk_shap:[39,51],codec_chunk_shape_soft_constraint:[39,51],codecspec:[10,22,54,55,56,241,248,252,265,267,277,293,295,308,398],colexicograph:[9,10,39,44,51,320,408],column:[39,44,51,320,408],com:[13,16,19],com_github_cares_car:16,com_google_boringssl:16,com_google_brotli:16,com_google_snappi:16,com_google_tensorstor:16,combin:[1,2,3,4,5,6,7,8,9,10,11,12,343,398,406,408,409],comma:[13,16],command:[13,16],commit:[22,200,203,205,209,214,320,332,333,338,339,340,341,342,360,364,405],commit_async:[213,332,333,335,338,340],commit_start:[333,339],commit_sync:[172,304,333,338,340],common:[3,7,11,13,20,39,51,141,406],compar:[23,24,25,38,69,72,173,174,195,196,241,243,267,269,343,344],comparison:[243,248,265,269,293,398],compat:[0,7,8,9,10,11,12,13,15,16,115,132,248,265,293,302,304,305,312,317,329,332,398,406,407,408],compil:16,complement:[22,392,393,394,395,409],complet:[15,104,106,107,109,110,113,200,201,203,205,209,214,237,239,240,302,303,304,305,317,320,329,332,360,406,407],complex128:[12,22,374,409],complex64:[12,22,375,409],complex:[3,22,374,375,406,409],compon:[7,8,9,10,12,19,23,39,115,121,141,148,185,189,241,248,409],compos:[2,14,15,120,141,147,247,273],composit:15,compress:[6,12,298,299,333,398,407,408],compressed_segment:[10,398,407],compressed_segmentation_block_s:[10,398,407],compression_level:6,compressor:[9,252,277,282,295,300,301,308,316,323,326,328,398,408],comput:[3,11,15,18,115,127,200,201,203,244,270,295,298,299,300,301,316,328,405,406],concaten:13,concis:20,concurr:[0,7,8,9,10,12,13,14,17,18,19,20,104,210,293,326,332],condit:[18,116,144,209,214,358,359],config:18,configur:[0,14,18,19],confirm:398,confus:406,conjunct:[15,293,326,398,408],connect:[13,14,18,19],consecut:[18,94,406],consequ:[117,120,193,210,293,326],consid:[9,332,408],consist:[7,8,9,10,12,14,94,132,209,406],constant:[1,15,22,215,216,229,233,391,406],constrain:[9,10,11,14,15,248,265,293,398,405,406,408],constraint:[1,2,3,4,5,6,7,8,11,15,23,24,26,29,31,34,35,37,39,42,43,44,45,49,51,53,241,248,251,252,254,265,267,276,277,279,280,282,288,293,326,343,398,405,408,409],construct:[23,24,26,27,39,40,54,55,57,64,65,66,68,69,73,74,75,76,115,121,122,123,141,148,149,150,173,175,180,181,185,187,195,197,215,216,217,218,241,248,249,267,274,343,345,346,347,348,349,376,377,380,381,382,383],constructor:64,consum:[22,94,104,206,360,406],contain:[3,8,13,15,16,69,70,71,77,94,98,115,127,173,177,349,405,406,407,408],content:[17,22,398,405],context:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,57,58,59,60,61,62,63,64,65,66,67,68,94,104,192,193,202,204,207,210,269,275,293,295,297,298,299,300,301,306,313,316,326,328,332,333,370,373,398,405,406,407,409],context_a:269,context_b:269,contextresourc:[0,1,4,5,6,7,8,9,10,11,12,17,18,19,21],contigu:[1,69,320],continu:[200,201,203],contrast:406,contribut:10,control:[19,332],conveni:[1,4,5,6,7,8,9,10,11,12,18,301],convers:[2,295,297,407],convert:[2,9,23,24,36,39,50,51,54,56,104,105,119,185,192,193,210,241,248,264,265,267,291,293,302,304,305,317,326,329,332,343,354,370,398,406],coordin:[94,406],copi:[0,15,16,172,173,176,185,190,204,241,243,251,253,267,269,278,332,360,365,406],core:[0,14,406],coroutin:[105,114,405],correctli:15,correspond:[9,10,12,15,18,19,20,21,22,26,37,39,51,85,90,94,95,104,105,127,132,133,237,248,254,265,293,309,360,371,372,374,375,388,389,390,392,393,394,395,396,398,399,400,401,402,403,404,405,406,408,409],corrupt:[7,9,10,12,293,326,398],cost:15,count:132,cpu:0,crash:332,creat:[1,2,3,4,5,6,7,8,11,14,16,22,57,60,61,63,172,193,207,210,237,238,254,267,293,295,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,316,317,320,323,326,328,329,332,333,334,405,407,408,409],credenti:[0,18,22,57,407],crlf:19,crt:[13,18,19],curl:[16,18,19],current:[0,12,15,16,104,200,201,203,209,295,297,320,332,333,405,407],custom:21,d:[22,69,94,95,96,97,98,99,100,101,102,103,116,117,142,143,144,145,242,245,268,271,291,292,296,299,303,376,377,391,406,407],dask:406,data:[0,1,2,3,7,8,11,14,19,20,21,186,187,188,189,190,191,202,204,209,241,248,256,265,267,281,293,300,302,304,305,306,308,311,312,317,320,326,329,332,355,356,357,358,359,370,371,372,373,380,381,382,388,389,390,392,393,394,395,396,398,399,402,404,405,406,408,409],data_copy_concurr:[0,1,4,5,6,7,8,9,10,11,12,94,104,275,295,298,299,300,301,306,316,326,328,373,398,405,406,407],data_encod:[10,398,407],data_typ:10,dataabc:186,databas:14,dataset:[9,17,18,21,192,295,297,298,299,300,301,302,303,304,305,310,311,315,316,317,319,320,326,328,329,332,333],dataset_3d:407,dataset_futur:407,datatyp:[9,281,298,299,333,398,407],date:[16,19],datetim:12,deadlin:[110,113,367,369],deadlock:[105,405],decod:[0,14,22,54,408],decrypt:13,def:[105,405],defer:406,defin:[0,1,4,5,6,7,8,9,10,11,12,15,17,18,19,21,22,94,115,241,371,405,406,408],del:200,delai:[18,19],delet:[7,9,10,12,172,200,203,205,214,293,326,398],delete_exist:[7,9,10,12,293,326,333,398,407],delete_rang:[172,205],demand:11,demonstr:407,denot:406,depend:[13,18,19,94,320,332,406,409],deprec:[12,406],deriv:[11,343,352],describ:[11,15,20,22,23,24],desir:254,detail:[13,14,19],determin:[7,9,10,15,116,144,172,398,408],determinist:3,develop:18,deviat:[343,408],dexpr:406,diagon:[93,95,376],did:[110,113],differ:[3,7,9,10,12,15,19,20,97,103,104,163,170,209,248,259,265,266,285,293,294,316,317,323,326,328,329,398,399,404,405],dim:[22,49,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,115,116,118,122,144,148,169,215,217,220,391],dimens:[3,11,12,14,15,22,23,24,26,33,37,39,47,49,51,53,69,73,74,75,76,91,93,95,96,97,98,99,100,101,102,103,115,117,118,119,121,122,124,128,129,132,134,137,141,142,145,148,153,154,158,170,215,218,241,242,244,245,248,254,265,266,267,268,270,271,279,284,287,291,292,293,294,295,296,298,299,303,309,319,328,329,333,343,347,376,377,397,398,405,407],dimension:[3,14,15,22,94,115,295,406],dimension_separ:[12,295,300,301,316,326,328,398],dimension_unit:[9,10,11,241,248,254,265,267,279,293,295,309,398,405,408],dimensionless:[9,343,408],dimexpress:[22,93,94,95,96,97,98,99,100,101,102,103,115,117,141,145,241,245,267,271,295,299,303,376,406],dimselectionlik:[93,102,115,119,376,377],direct:94,directli:[0,1,2,3,7,8,9,10,11,12,15,16,17,18,19,132,141,186,276,277,279,280,282,288,302,303,304,305,317,329,343,405,406,408,409],directori:[13,16,17,18,19,20,21],disabl:[12,13],discrep:[116,144],disjoint:332,dist:16,distribut:[13,16,398],divid:[343,351,406],divisor:[343,351],do_read:405,do_writ:405,doc:16,document:[13,20,408,409],doe:[7,9,10,12,13,15,16,17,19,64,94,96,98,99,100,101,132,141,276,277,279,280,282,283,288,293,300,313,326,332,343,371,398,406,408],domain:[3,11,14,22,93,94,95,96,97,98,99,100,101,102,103,104,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,161,163,164,167,168,170,241,242,244,245,246,247,248,254,255,259,260,262,263,265,266,267,268,270,273,279,280,286,287,288,289,290,292,293,294,295,296,297,298,299,301,302,303,304,305,309,310,317,318,319,320,323,324,325,328,329,332,376,391,397,398,405,406,407,408],domin:406,don:16,done:[14,16,18,98,104,105,109,237,239,240,248,265,293,360,366,398,406],dot:12,doubl:[22,343,390,408,409],download:16,downsampl:[7,22,378,379,409],downsample_factor:[3,22,378,379],downsample_method:3,downsamplemethod:[3,378,379],driver:[0,14,22,54,94,104,172,186,187,188,189,190,191,192,193,194,200,201,202,203,204,205,206,207,208,209,210,212,213,214,241,252,254,267,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,316,317,320,323,326,328,329,332,333,343,373,398,406,407,408,409],drop:[15,332],dtype:[1,2,3,4,5,6,7,8,9,10,11,12,22,94,104,241,243,248,249,250,253,256,261,264,265,267,278,280,281,282,288,293,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,315,316,317,319,320,323,326,328,329,332,333,370,371,372,373,374,375,380,381,382,383,384,385,386,387,388,389,390,392,393,394,395,396,398,399,400,401,402,403,404,405,406,407,408,409],due:[10,17,209],dummi:[94,406],duplic:[96,406],durabl:[14,200,203,205,214,332,360],dynam:13,e:[9,10,12,13,15,16,18,22,39,44,51,92,94,98,99,100,101,116,120,144,209,210,251,320,326,333,405,406,408],each:[0,3,7,8,9,10,11,12,13,15,19,26,37,64,96,98,99,100,101,115,121,128,129,132,134,141,148,153,154,158,241,248,251,254,265,267,279,293,295,297,309,398,405,406,408,409],earlier:[11,16],easili:406,effect:[11,15,94,116,144,193,210,267,276,277,279,280,282,288,293,326,335,338,406],effici:[3,10,14,15,23,48,49,52,53,332,333,408,409],effort:16,either:[7,9,10,12,15,18,22,69,116,119,144,302,303,304,305,317,329,332,333,341,376,398,406],element:[2,3,10,23,24,26,30,31,37,39,44,45,50,51,94,115,139,141,168,241,263,267,275,290,295,325,406,408],elements_soft_constraint:[24,26,31,37,39,51,408],empti:[8,9,15,69,81,85,90,91,116,144,173,175,177,178,179,198,214,248,265,293,343,358,359,398,405,406,408],enabl:[7,9,10,12,14,18,69,77,141,332,405,406],encod:[0,5,9,12,14,16,19,22,54,398,407,408,409],end:[18,19,20,21,102,132,406],endian:[9,10,12,409],engin:18,enhanc:406,ensur:[16,104,111,186,254,332,333,398,406],entir:[8,10,12,15,116,144,297,332,349,406,408,409],entri:[195,198],environ:[16,18,19],epoch:[7,110,113,195,199,209],equal:[0,1,9,10,12,15,22,23,24,25,38,44,45,62,69,72,82,83,88,89,92,94,95,120,173,174,195,196,241,243,244,245,247,248,265,267,269,270,271,273,283,293,298,301,302,305,308,312,313,343,344,391,398,405,406,408],equival:[3,9,12,19,39,51,69,78,94,95,98,99,100,102,115,120,132,142,164,167,168,209,242,248,260,262,263,265,268,286,289,290,293,296,297,301,318,319,324,325,326,332,340,347,398,405,406,408],error:[8,9,10,11,12,15,18,19,104,105,110,113,116,144,200,201,203,209,237,239,248,265,293,340,398,405,406],escap:16,etag:19,etc:[3,13,16,18,19,323],even:[3,8,14,19,62,200,203,406],evenli:408,event:[105,405],everi:[7,8,9,10,12,14,15,19,95,398,405,408],evict:0,exactli:[3,9,10,12,94,398,405,406],exampl:[16,187,207,333,405,407],except:[9,10,12,98,104,105,108,110,111,200,201,203,237,239,248,265,269,293,333,360,367,398,405,406,408],excess:10,exclud:20,exclus:[15,69,73,82,83,115,121,126,141,148,155,173,175,178,406],exclusive_max:[9,10,12,15,69,70,71,72,73,74,77,79,80,82,83,84,85,86,87,88,90,92,115,116,117,118,119,120,121,123,126,127,128,129,132,133,144,148,149,155,169,173,175,178,244,245,246,259,266,270,288,293,298,302,323,406],exclusive_min:[69,83,89],execut:[0,16,104,111,398,405],exist:[1,2,3,4,5,6,7,8,9,10,11,12,16,94,98,116,144,148,149,200,201,203,205,207,209,214,248,254,265,293,302,304,305,317,326,329,332,358,359,380,382,405,406,408,409],exit:333,expect:[13,16,114,254,406],explicit:[7,15,69,115,120,121,128,129,141,148,153,154,241,244,247,248,265,267,270,273,293,295,298,301,302,305,332,398,405,406,408],explicitli:[9,10,12,111,406,408],exponenti:18,expos:8,expr:[98,115,117,141,145,241,245,247,267,271,273,295,299,301,303,305,406],express:[14,22,69,79,93,94,96,97,98,99,100,101,102,103,115,117,132,141,145,241,245,267,271,295,299,303,376,397],extend:[1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,21],extens:[12,16,94,371],extent:[12,15,139,200,203,205,214,408],extern:[193,209,210,293,326,333],extract:[93,95,376,406],f2:12,f4:[12,282,398],f8:12,f:[12,104,295,320,332,398,405],facil:13,factor:3,fail:[1,2,3,4,5,6,7,8,9,10,11,12,18,209,333,405,406,409],fake:18,fals:[7,9,10,12,21,24,36,54,56,58,59,60,62,70,71,73,74,75,76,84,86,87,92,94,105,108,128,129,153,154,177,185,192,193,210,237,239,240,241,264,267,291,293,295,322,326,333,334,398,406,408],faster:16,fastest:[9,12,16],fetch:16,few:406,fewer:[0,406],field:[12,85,90,408],file:[4,6,8,9,10,12,13,14,16,18,20,21,186,187,188,189,190,191,192,202,204,332,333,398,407],file_io_concurr:[0,17,67,68,192,202,204],filesystem:[0,14,17,20,398,407],fill:[14,102,241,248,257,265,267,282,293,295,312,398,407,408],fill_valu:[11,12,241,243,248,257,265,267,282,293,295,300,301,312,316,323,326,328,398,408],filter:[12,252,295,300,301,308,316,323,326,328,398,408],find:[13,16],fine:[302,303,304,305,317,329],finit:[15,69,76,77,84,92,132,248,265,293,398,405,408],first:[10,15,16,94,95,103,170,266,294,328,329,398,406,408],fix:[332,399,404],fix_resizable_bound:[295,322],flag:[16,85,90,127,133],flatten:406,float16:[12,22,388,409],float32:[9,10,12,22,282,307,373,375,389,398,409],float64:[9,12,22,374,390,409],fly:3,flyeem:407,flyem:398,fold:19,follow:[3,9,10,11,12,13,15,16,18,19,114,116,144,248,265,293,343,398,405,406,408,409],forc:[104,111],form:[15,63,301,406],format:[9,10,12,13,14,398,408,409],fortran:[9,10,39,44,51,320,408],forward:360,found:201,fraction:209,fragment:19,framework:57,free:405,frequent:3,fresh:[7,8,9,10,12],from:[0,1,2,3,7,8,9,10,11,12,14,15,17,18,19,22,23,24,27,39,40,51,54,55,57,60,61,65,66,67,68,94,95,102,115,118,121,122,123,132,141,148,149,150,173,175,185,187,195,197,206,207,209,241,248,249,251,267,274,297,332,333,343,345,346,348,349,352,370,376,377,380,382,398,406,407,408],fsync:332,fulfil:[355,357],full:[8,12,15,21,94,326,406,408],fulli:[12,14,15,141,193,210,293,326,332,398],further:408,futur:[16,22,104,105,106,107,108,109,110,111,112,113,114,172,205,206,207,209,214,237,238,239,240,295,320,322,332,333,338,341,360,361,364,365,368,398,407],futurelik:[22,104,105,114,405],g:[12,13,18,22,94,98,99,100,101,210,251,326,333,405,406],gc:[2,3,8,10,12,20,21,194,208,212,332,398,407],gcc:16,gce:18,gcloud:18,gcs_request_concurr:[13,18,398,407],gcs_request_retri:[18,398,407],gcs_user_project:[18,398,407],gener:[16,94,172,180,182,195,196,197,198,199,209,214,301,343,355,356,358,359,405,406,408],get_running_loop:[105,405],get_valu:105,git:16,github:16,given:[0,3,17,57,63,69,71,94,98,99,100,101,406,408],global:[0,18,19,405],good:10,googl:[14,16,18,332,407],google_application_credenti:[13,18],googleapi:13,grain:[302,303,304,305,317,329],granular:[10,408],graph:[193,210,293,326],grid:[9,10,12,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,43,48,51,52,332,408],grid_origin:[9,10,12,23,39,42,43,49,51,53,244,245,246,247,248,249,251,259,261,264,266,288,307,323,408],grid_origin_soft_constraint:[23,39,43,49,51,53,408],grid_soft_constraint:[26,37],group:[10,22,333],gs:[4,5,6,18,20,194,212,407],gsutil:18,guarante:[8,14,200,203,205,209,214,332,333,360,371],guid:14,gzip:[9,10,12,398,407,408],ha:[9,10,11,12,15,18,94,101,102,104,107,108,109,193,205,210,248,265,283,293,312,326,332,333,335,336,338,339,341,342,360,398,405,406],half:[0,22,69,73,172,173,175,388,409],handl:[18,19,22,57,58,63,104,229,231,237,295,360,405],hard:[9,10,12,15,23,24,26,34,37,39,42,44,45,49,51,53,408],hash:[10,398,407],have:[9,10,11,12,15,16,18,19,69,96,116,144,193,210,244,248,265,270,293,298,310,326,333,371,398,406,407,408],header:[9,12,19],hemibrain:398,here:9,hierarch:408,high:[14,398],higher:[4,9,12,209],hit:407,hold:360,hostnam:13,how:[13,18,19,408],howev:[3,12,16,18,94,104,141,405],htab:19,http:[16,18,20],http_archiv:16,http_proxi:13,http_request_concurr:19,http_request_retri:19,https_proxi:13,hull:[11,69,85,115,127],i1:12,i2:12,i4:[12,398],i8:12,i:[0,9,10,12,14,15,18,39,44,49,51,53,92,94,98,102,116,120,144,200,201,203,209,217,218,276,277,279,280,282,288,320,332,333,406,407,408],id:[0,10,12,18,63,295,300,301,308,316,323,326,328,398,408],ident:[9,10,15,120,148,149,210,269,326,398,407],identifi:[0,7,9,12,15,16,20,115,116,118,144,172,195,198,405,406,408,409],ieee:[22,388,389,390,409],iexpr:406,if_equ:[214,358,359],if_not_equ:[209,355,356,405],ignor:[1,2,3,4,5,6,7,8,9,10,11,12,49,53,408,409],ijg:10,imag:[4,5,6,10],imaginari:409,immedi:[15,105,114,406],immut:[115,343,405,406],implement:[8,12,14,16,209],impli:[267,276,277,279,280,282,288],implicit:[9,10,11,12,15,22,69,73,74,75,76,85,86,87,90,94,95,115,116,121,127,128,129,133,141,144,148,153,154,248,265,293,398,405,406,408],implicit_low:[69,72,73,74,75,76,86],implicit_lower_bound:[115,121,128,141,148,153,169,406],implicit_upp:[69,72,73,74,75,76,79,87],implicit_upper_bound:[115,121,129,141,148,154,169],implicitli:[9,10,12,15,406,407,408],impos:[15,343,408],improv:[332,333],includ:[9,10,12,13,14,16,19,21,22,62,115,119,267,276,277,279,280,282,288,302,304,305,317,320,326,329,332,406,408],include_default:[24,36,54,56,58,59,60,62,185,192,241,264,267,291],inclus:[15,69,73,74,75,88,89,115,121,130,131,136,141,148,156,157,159,164,173,175,179,241,260,267,286,295,318,406],inclusive_max:[15,69,72,74,82,83,87,88,89,92,115,121,130,156,391],inclusive_min:[9,10,12,15,69,70,71,72,73,74,75,77,79,80,82,83,84,85,86,87,88,89,90,92,115,116,117,118,119,120,121,123,126,127,128,129,130,131,132,133,134,136,138,139,144,148,149,157,169,173,175,179,244,245,246,259,266,270,288,293,298,302,323,391],incompat:[11,49,53,248,265,293,398,405],inconsist:8,increment:[16,248,254,265,293,309,398,405,408],indefinit:405,independ:[10,15,22,241,398,408],index:[3,10,14,23,47,69,71,93,95,96,97,98,99,100,101,102,103,116,117,118,119,120,121,122,123,132,137,143,144,145,146,147,148,149,150,152,163,165,170,171,215,217,225,229,244,246,247,248,254,259,265,266,270,272,273,280,285,292,293,294,298,300,301,302,304,305,309,316,317,328,329,376,391,397,398,405,408],index_arrai:[15,150,169,215,217,219,247,272,273,285,294,300,301,305,316,328],index_array_bound:[15,150],index_exp:[115,132,405],index_rang:[148,169,215,217,220],indexdomain:[9,10,12,15,22,23,49,53,69,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,149,152,241,244,245,246,247,248,255,259,265,266,267,270,280,293,295,298,299,302,303,310,398,405,406,408],indexerror:[94,96,98,99,100,101,247,406],indexinterv:15,indextransform:[1,2,3,4,5,6,7,8,9,10,11,12,15,22,94,95,96,97,98,99,100,101,102,103,115,117,120,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,215,216,217,218,225,229,241,246,247,259,266,267,270,271,272,273,285,292,294,295,298,299,301,305,397,406,409],indic:[3,9,10,12,15,22,62,69,73,74,75,76,77,84,86,87,91,93,94,97,98,102,103,115,116,121,128,129,132,141,143,144,146,148,153,154,163,170,173,175,177,178,179,180,183,198,209,214,229,241,246,247,248,254,259,265,266,267,272,273,275,285,293,294,295,300,301,304,305,309,316,317,321,326,328,329,331,332,333,336,337,339,342,343,360,376,377,391,398,405,406,408],indicaet:9,indirectli:[141,408],individu:[8,10,11,406,408],ineffici:10,inf:[15,22,49,53,69,73,74,76,80,82,83,88,89,94,95,96,97,101,103,120,121,123,145,146,147,148,150,163,170,181,197,209,391,397,405,406],infinit:[15,69,132,248,265,293,398,405,408],info:10,inform:[13,16,18,19,398],infti:15,inherit:[57,65,66,67],init:0,initi:[1,16,18,19,405,406],initial_delai:[18,19],inlin:406,inner:[12,44,45,69,70],inner_ord:[9,10,12,23,39,44,45,46,47,50,51,244,245,246,247,248,249,251,259,264,266,288,307,323,398,408],inner_order_soft_constraint:[23,39,44,45,51,408],innermost:[23,39,44,51,408],input:[1,2,3,7,9,10,11,12,15,22,93,94,95,96,97,98,99,100,101,102,103,119,141,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,170,215,218,248,265,292,293,376,397,398,405,406,409],input_dimens:[11,15,120,147,148,149,150,169,215,218,221,272,291,300,328,406,407],input_exclusive_max:[11,15,94,104,141,144,148,150,153,154,155,169,270,271,272,273,285,291,293,294,295,298,299,300,301,306,316,326,328,373,398,406,407],input_inclusive_max:[15,98,141,148,156],input_inclusive_min:[11,15,94,98,99,100,104,141,144,148,150,153,154,155,156,157,158,159,169,270,271,272,273,285,291,293,294,295,298,299,300,301,306,316,326,328,373,398,406,407],input_label:[15,94,95,97,98,99,100,101,102,103,141,144,148,150,152,158,160,162,166,169,270,271,298,299,398,406,407],input_origin:[141,157,159],input_rank:[15,94,120,141,143,144,145,147,148,153,154,160,162,216,218,247,273,301,397,406],input_shap:[15,95,99,100,101,102,141,148,152,153,154,155,156,157,158,159,160,161,162,166,169,217,247,270,271,272,273,285,294,301,305,406],insensit:19,insert:406,instal:[14,18],instanc:[0,64,107,380,381],instead:[7,8,9,10,12,13,16,104,132,141,186,209,293,301,326,332,398,405,406],instruct:14,int16:[9,10,12,22,392,409],int32:[1,2,9,10,11,12,22,94,243,315,319,393,398,406,409],int64:[9,12,22,394,409],int8:[9,10,12,22,395,409],integ:[0,1,2,3,7,9,10,11,12,15,18,19,22,69,97,117,118,120,163,259,285,316,317,392,393,394,395,400,401,402,403,408,409],integr:406,intend:[16,18,20,21],interdepend:[193,210,293,326],interfac:[14,172,237,302,303,304,305,317,329,360],interleav:406,intermedi:406,intern:[9,10,209],interoper:[295,297,371,407],interpret:[19,132,180,183,343,406,408,409],interrupt:[110,113],intersect:[69,90,95,115,133],interv:[3,15,22,49,53,69,70,71,72,73,74,75,76,77,78,80,82,83,84,88,89,92,172,173],introduc:14,introspect:63,invoc:[16,406],invok:[16,104,106],involv:[15,406],ip:13,irrespect:[98,209],isol:[14,333],isomorph:[193,210,293,326],issu:332,iter:[69,77],its:[15,17,57,60,61,65,115,123,141,150,209,241,249,343,346,406,408],itself:[8,332,360,406],j:[15,116,144],janelia:398,jax:[12,371],join:[7,8,9,10,12,185,189],jointli:332,jpeg:[7,10,16,409],jpeg_qual:10,jpg:5,json:[0,1,2,3,4,5,6,7,9,11,12,13,14,15,17,18,19,20,21,22,23,24,27,36,39,40,41,42,43,44,45,48,50,51,52,54,55,56,57,58,59,60,61,62,65,115,123,140,141,150,169,172,185,187,188,192,202,207,241,243,249,250,264,267,269,274,275,291,343,346,354,396,398,408],json_point:8,just:[7,9,10,12,15,293,326,398,406,407],k:[102,116,144],keep:332,kei:[8,9,10,12,14,22,57,63,172,173,175,177,180,184,185,186,189,190,191,194,195,198,200,201,203,204,205,206,207,208,209,210,211,212,213,214,267,283,293,295,313,332,333,398,407,408],kept:[10,16],key_encod:12,keyboard:[110,113],keyboardinterrupt:[110,113],keyerror:[200,201,203,209],keyrang:[172,173,174,175,176,177,178,179,205,206],keyvaluestorebackedchunkdriv:[7,9,10,12,409],keyword:104,know:398,kvstore:[2,3,4,5,6,7,8,9,10,12,17,18,19,20,21,22,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,267,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,291,292,293,294,295,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,316,317,320,323,326,328,329,332,333,398,405,407],kvstoreurl:[7,8,9,10,12,17,18,19,20,21],label:[9,10,12,14,15,22,69,72,73,74,75,76,79,80,85,90,91,93,94,95,96,102,115,117,118,119,121,122,123,127,133,134,141,145,148,158,244,245,246,247,248,255,259,265,266,270,293,298,299,302,303,310,376,377,398,405,408],lambda:104,larg:[14,206,297],larger:[15,407],largest:10,last:[15,94,108,118,119,200,201,203,209,239,247,406],latenc:[14,332,398],later:[16,17,398],latest:16,latter:12,layer:[8,9,10,12,332,408],layout:[14,22,23,24,38,39,46,47,49,50,51,53,241,248,251,265,267,276,293,295,307,320,398,405],lead:[7,9,10,12,15,105,293,326,349,398,408],least:[0,9,15,116,144,406],leav:[9,98,99,100,405],left:[10,15,116,144,398,405],legaci:406,len:124,length:[3,9,12,15,22,143,399,404,406,408],leq:15,less:[15,248,254,265,293,309,343,347,398,405,406,408],level:[2,6,9,12,13,14,209,407,408],lexicograph:[3,39,44,51,172,173,175,179,320,408],libavif:16,libcurl:13,libjpeg:16,libpng:16,librari:[12,14,132,141,406],lightweight:406,like:[13,14,18,19,117,120,254,398,406],likewis:406,limit:[0,14,15,18,19,20,67,68,360,405],line:19,link:[13,16,237,238,239,240],linux:[13,16],list:[9,13,15,16,77,118,172,205,206,209,378,379,398,406],liter:406,littl:[10,12,409],load:16,local:[0,13,14,17,18,20],localhost:18,locat:[13,18,19,323,398],lock:17,logic:[15,115,332,409],login:18,longer:360,loop:[105,405],lost:8,low:[10,15],lower:[3,4,15,69,73,74,75,76,83,86,89,95,98,101,115,121,128,131,132,136,141,148,153,157,159,164,173,175,179,241,260,267,286,295,318,406,408],lowest:3,lru:0,lz4:[9,12,16,295,298,299,300,301,308,316,323,326,328,398,408],lz4hc:[9,12],m1:15,m2:15,m:[15,16,408],mac:13,machin:[14,17,18,398],maco:16,made:[209,333,405],mai:[0,3,8,9,10,11,12,13,15,16,17,18,19,20,21,69,98,99,100,101,102,105,114,115,119,121,148,172,200,201,203,207,209,210,213,237,254,295,297,302,304,305,308,317,320,323,326,329,330,332,338,342,343,355,357,376,398,405,406,408,409],main:[110,113],major:[39,44,51,320,408],make:[13,16,408],manag:[22,57,333],mani:[13,15,18,19,94,141,398,406],manipul:21,manual:[15,16],map:[0,11,15,22,94,95,96,97,98,99,100,101,102,103,117,120,141,143,144,145,146,147,148,149,150,163,165,170,172,215,216,217,218,225,292,397,406],mark:[15,69,107,237,239,240,406],match:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,19,21,85,90,96,98,99,100,101,116,144,206,209,214,248,265,293,326,358,359,398,405,406,408,409],mathrm:[10,15],mathtt:15,max:3,max_delai:[18,19],max_retri:[18,19],maximum:[0,3,18,19,110,113],mayb:16,mean:[3,7,8,9,10,12,406],meaning:92,mechan:[4,5,6,7,8,9,10,12,14,172,360,406],median:3,member:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,39,41,42,43,44,45,48,51,52,62,408,409],memori:[0,1,7,9,10,12,14,15,19,20,22,172,193,200,201,203,205,206,207,209,210,213,214,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,291,292,293,294,295,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,316,317,320,323,326,328,329,332,333,370,398,405,407,409],memory_key_value_stor:[21,193,210,275,295,298,299,300,301,313,316,326,328,398],mere:[300,332,360],merg:[26,37,248,265,293,398,405,408],metadata:[7,9,10,12,18,254,276,277,279,280,281,282,284,287,288,291,292,293,295,298,299,300,301,316,326,328,333,407],metadata_kei:12,metdata:9,method:[3,9,12,18,22,215,222,229,301,378,379,406,407],microsoft:16,middl:407,million:[9,10,12],min:[3,15],mind:332,minim:[398,406],minimal_spec:326,minimum:[3,115,127],minishard:10,minishard_bit:[10,398,407],minishard_index_encod:[10,398,407],mismatch:15,miss:[172,180,181,183,209,214,408],mix:406,mode:[3,16,94,97,103,267,293,295,314,326,333,398],model:12,modif:[22,333],modifi:[8,15,115,185,193,251,332],modul:[16,405],more:[1,4,5,6,7,8,9,10,11,12,13,15,16,20,94,119,301,332,405,406,409],most:[3,10,12,13,15,18,20,94,108,119,121,148,172,200,201,203,209,239,247,301,332,406,408],ms:13,msvc:16,much:16,multi:[14,21,22,295],multipl:[0,3,7,9,10,12,14,15,16,17,18,19,21,254,293,302,303,304,305,317,326,329,332,333,398,405,406],multipli:[9,10,15,343,345,347,348,349,350,353,408],multiscal:10,multiscale_metadata:[10,398,407],murmurhash3_x86_128:10,must:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,19,39,51,64,85,90,94,102,111,120,209,244,247,248,265,270,273,293,298,301,302,305,326,332,398,405,406,408,409],my:[2,3,4,5,6,8,10,12,18,19,194,208,212],n5:[7,14,269,274,275,278,279,281,283,284,287,291,292,293,298,299,302,303,309,310,313,333,398,408],n:[15,22,94,115,406],name:[9,10,12,16,19,229,231,234,380,383,384,405,406],nanomet:10,nasm:16,nativ:[9,12,14,406],ndarrai:[295,297,405,406,407],ndim:[23,24,32,46,115,135,141,162,241,258,267,284,295,315],nearest:3,necessari:[7,9,10,12,13,15,116,144,293,326,398,409],necessarili:[94,406,408],need:[15,16,94,141,343,406,408],neg:[102,118,132,406,408],neither:[7,8,9,10,12,15,326,398,405],neq:15,nest:[1,11,15,193,207,293],nesteddirectorystor:12,net_zlib:16,net_zstd:16,network:[14,17,18,19],neuroglanc:[10,14,398,407,408],neuroglancer_multiscale_volum:10,neuroglancer_precomput:[7,254,398,407,408],neuroglancer_uint64_sharded_v1:[10,398,407],never:[7,320,332,406],newaxi:[22,94,95,397,406],newer:[355,356],newli:95,nghttp2:16,nm:[9,10,254,279,309,344,345,346,348,349,350,351,352,354,408],no_proxi:13,non:[3,7,8,9,10,12,15,16,18,85,90,94,102,116,144,172,207,248,265,293,333,358,359,360,398,405,406,408],none:[15,18,19,22,23,24,26,28,29,30,31,32,33,34,35,37,39,42,43,44,45,49,50,51,53,57,64,65,66,69,73,74,75,76,93,94,98,99,100,101,104,105,106,110,111,112,113,115,121,132,141,148,149,172,185,193,200,203,205,206,207,209,210,211,213,214,215,219,220,221,224,237,239,240,241,244,245,246,247,248,252,254,255,256,257,258,259,261,265,266,267,270,271,272,273,277,279,280,281,282,283,284,285,287,292,293,294,295,297,300,301,308,309,312,313,316,323,326,327,328,330,333,335,338,340,341,360,361,364,365,367,368,369,370,376,397,398,405,406],nonzero:[94,406],nor:[7,9,10,12,15,326,398,405],normal:[1,4,5,6,7,8,9,10,11,12,13,15,16,19,116,144,248,265,293,332,333,398,406],note:[3,9,10,13,15,16,94,248,265,293,398,405],now:[332,398],np:[132,297,405,407],num_channel:[10,398,407],number:[0,3,4,5,6,7,9,10,15,16,18,19,22,23,24,26,30,31,33,37,39,47,51,96,98,99,100,101,110,113,115,121,124,132,137,139,141,148,168,206,241,263,267,290,295,319,325,343,349,374,375,406,408,409],numer:[3,15,343,406,408],numpi:[12,15,22,93,94,97,98,103,115,132,141,146,163,170,241,246,247,259,266,267,272,273,285,294,295,297,300,304,316,317,328,329,371,372,374,375,376,380,382,388,389,390,392,393,394,395,396,399,400,401,402,403,404,407],numpy_dtyp:[380,385],numpyindexingspec:[93,94,97,103,141,146,163,170,241,246,259,266,267,272,285,294,295,300,304,316,317,328,329,376],o:[0,14,200,201,203,276,277,279,280,282,288,320,406,407],oauth2:13,obj:[146,406],object:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,85,90,104,105,110,113,115,122,127,132,133,148,149,194,208,212,237,239,240,251,297,332,333,343,360,367,369,380,381,387,406,407,408,409],object_:[396,399,404],observ:[333,405],obsolet:19,obtain:[9,12,94,115,251,295,322,406,407],occupi:409,occur:[15,104,200,201,203,406],odd:3,offer:3,offici:12,offset:[3,11,15,23,49,53,93,99,100,120,147,148,149,150,166,169,215,216,217,218,223,291,376,406,407,408],often:[18,332],oindex:[93,97,141,146,163,241,246,247,259,266,267,272,273,285,294,295,300,301,304,305,316,317,328,329,376],older:[7,8,9,10,12,209,355,357],omit:[11,398,406],onc:[15,22,119,214,332,333,342,360,405],one:[9,12,13,15,18,94,95,116,121,144,148,248,265,293,301,398,405,406,408],ones:9,onli:[0,3,7,8,9,10,11,12,13,15,16,17,19,39,49,51,53,94,95,104,121,148,214,248,265,276,277,279,280,282,288,293,314,320,332,333,360,398,405,406,407,408],onto:406,op1:406,open:[1,2,3,4,5,6,7,8,9,10,11,12,14,22,69,73,104,172,173,175,193,200,201,202,203,204,205,206,207,208,209,210,212,213,214,254,267,293,295,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,316,317,320,323,326,328,329,332,333,342,405,406,407,408,409],openssl:13,oper:[0,7,8,9,10,11,12,13,14,15,16,17,22,94,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,113,117,120,141,146,163,170,171,172,180,200,203,205,207,209,213,214,237,246,259,266,272,285,294,295,300,302,303,304,305,317,327,329,330,332,342,360,398,405],opn:406,opt:16,optim:[12,16],optimist:14,option:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,69,115,241,248,265,267,276,277,279,280,282,288,293,326,355,358,398,405,408,409],order:[9,10,15,16,18,22,23,39,44,45,51,94,102,141,142,172,173,175,179,206,241,242,267,268,276,288,295,296,300,301,316,320,326,328,332,398,406,408,409],org:16,org_aomedia_avif:16,org_blosc_cblosc:16,org_lz4:16,org_nghttp2:16,org_sourceware_bzip2:16,org_tukaani_xz:16,origin:[3,9,10,12,15,23,39,42,43,51,93,98,99,100,101,115,131,136,141,159,164,193,210,241,248,260,265,267,286,293,295,318,326,376,398,405,406,408],orthogon:[97,163,259,285,316,317,406],os:13,other:[3,9,10,12,15,16,23,24,25,26,37,38,49,53,64,69,71,72,85,90,94,115,116,121,127,133,141,173,174,195,196,200,201,203,241,243,267,269,301,343,344,398,405,406,408],otherwis:[1,2,3,7,9,10,11,12,15,16,18,19,73,74,75,105,116,121,144,148,340,408,409],out:[15,94,95,96,97,98,99,100,101,102,103,144,145,146,147,148,149,150,163,170,292,397,406],outer:[93,97,141,163,241,259,267,285,295,316,317,376],output:[11,16,22,93,94,95,96,97,98,99,100,101,102,103,117,120,141,143,144,145,146,147,148,149,150,163,165,166,169,170,215,216,217,218,225,227,228,229,247,248,265,272,273,285,291,292,293,294,300,301,305,316,328,376,397,398,405,406,407],output_rank:[120,141,143,166,247,273,301,302,305],output_user_root:16,outputindexmap:[15,22,120,141,147,148,149,165,166,169,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,247,273,301,305],outputindexmethod:[22,215,222,225,229,230,231,232,233,234,235,236],outsid:[333,406],over:[3,13,15,69,77,120,148,149,332,406,408],overlap:[8,11],overrid:[0,1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20,21,293,326,398,409],overridden:[9,16,193,207,293,398],own:18,pack:12,pai:18,pair:[21,237,238,343,348],parallel:398,paramet:[9,10,12,18,19,20,22,26,37,39,51,54,62,63,65,66,73,74,75,76,85,90,96,98,99,100,101,102,105,110,113,117,118,119,120,121,122,127,133,143,148,149,175,193,200,201,203,205,206,207,209,210,214,244,247,248,265,270,273,293,298,301,302,304,305,317,320,326,329,332,370,398,405,408,409],parent:[0,1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,57,65,66,67,68,409],pars:[57,60,66,172,185,349,408],part:[16,23,39,241,248,254,376],partial:[7,9,10,12,15,398],particular:[0,14],particularli:[92,405],partit:[297,408],pass:[16,22,355,358],path:[4,5,6,7,8,9,10,12,13,14,16,17,18,19,20,21,172,185,186,187,188,189,190,191,192,193,194,200,201,202,203,204,205,207,208,209,210,212,214,283,313,333,398,407],pattern:104,pem:13,pend:0,pep:406,per:[9,10,12,15,24,26,30,31,37,408],percent:19,perfect:406,perfectli:[332,406],perform:[2,3,10,14,15,93,200,203,205,207,213,214,276,277,279,280,282,288,302,303,304,305,317,320,329,330,398,405,406,407,408],permiss:18,permit:[7,8,9,10,12,15,93,94,102,117,120,248,265,293,398,405,406],permut:[15,23,39,44,45,51,408],persist:[12,333],physic:[9,22,241,248,254,265,267,279,293,295,309,343,398,405,408],pick:10,pip:16,place:[10,13,94],plain:93,platform:[12,16],plu:406,pm:15,png:[7,16,409],point:[22,332,333,343,371,388,389,390,408,409],pointer:8,polici:[295,322],pool:[0,210,326,398,405],portion:[349,408],posit:[3,11,15,248,265,293,295,312,398,406,407],posix:[16,17],possibl:[7,9,10,12,15,16,293,323,326,398,405],potenti:406,power:406,pre:16,prebuilt:16,preced:[13,39,51,248,265,293,398,405,408],precis:[22,39,51,332,343,388,389,390,396,399,404,408,409],precomput:[10,14,408],predecessor:406,prefer:[39,51,408],prefix:[18,20,21,172,185,191,208,406],prepar:13,presenc:8,present:[3,9,15],preserv:405,preset:9,preshift_bit:[10,398,407],prevent:16,previou:406,previous:[1,4,5,6,7,8,9,10,11,12,17,18,19,21,104,112,207,398,405],primarili:[63,69,117,120],print:[13,73,74,75,76,80,104,252,254,255,256,257,261,281,284,287,292,405],prior:[7,8,9,10,12,16,96,98,99,100,101,405,406],problem:[12,18,19],process:[8,14,17,297],produc:[22,104,110,113,237,406],product:[115,139],progress:16,project:[16,18],project_id:18,promis:[22,104,108,237,238,239,240],propag:[11,85,90,127,133],properti:[3,9,10,12,14,20,153,154,155,156,157,158,159,161,251,333,398,405,408,409],propos:406,protocol:[17,406],provid:[8,9,10,12,13,14,16,17,18,104,332,333,360,398,406],purpos:[21,117,405,406],py:[16,115,122,146],python3:16,python:[1,12,14,22,69,79,304,305,396,399,404,406],qualiti:[4,5,10],quaniti:[343,408],quantiti:[22,248,254,265,293,309,343,347,398,405,408],quantiz:4,queri:[14,19,104,108,109],queued_for_writeback_bytes_limit:0,quit:3,r:[177,314],rais:[49,53,77,96,98,99,100,101,104,110,113,119,132,200,201,203,206,209,244,245,246,247,248,259,265,266,270,271,272,273,285,293,294,333,340,398,405],rang:[5,15,69,93,99,100,101,102,172,173,174,175,176,177,178,179,205,206,217,218,332,376,377,406],rank:[1,2,3,4,5,6,7,8,9,10,11,12,15,23,24,26,32,33,37,39,44,46,47,49,51,53,94,95,96,97,98,99,100,101,102,103,115,116,117,120,121,124,128,129,132,135,137,141,144,145,146,147,148,149,150,160,162,163,166,170,225,227,228,241,243,244,245,246,247,248,249,250,253,254,256,258,259,261,264,265,266,267,273,284,287,288,292,293,295,301,302,305,315,319,323,397,398,405,406,408,409],rare:[12,406],rate:408,rather:[39,44,45,51,94,406,408],ratio:[24,26,28,29,37,39,51,408],raw:[9,333],re:[16,172,193,210,293,295,326,398,405],reach:0,read:[2,3,7,8,9,11,12,14,15,19,22,23,24,39,48,49,51,172,180,181,201,207,209,213,214,293,295,297,300,301,302,303,304,305,306,314,317,320,321,326,327,329,330,332,333,355,356,357,360,370,373,405,406,408],read_chunk:[9,10,12,23,39,48,49,50,51,288,307,323,408],read_chunk_aspect_ratio:[39,51],read_chunk_aspect_ratio_soft_constraint:[39,51],read_chunk_el:[10,39,50,51],read_chunk_elements_soft_constraint:[39,51],read_chunk_shap:[10,39,49,51,405],read_chunk_shape_soft_constraint:[39,51],read_chunk_templ:[23,49,53],read_context:405,read_funct:405,read_futur:407,read_param:405,readabl:[295,321],reader:[17,333],readi:[110,113,205,332,341],readm:16,readresult:[172,180,181,182,183,184,207,209,214],real:[248,265,293,398,405,409],rebuild:16,receiv:[15,18,19,110,113],recent:[0,94,108,119,200,201,203,209,239,247,406],recheck:[7,8,9,10,12],recheck_cached_data:[7,8,9,10,12,407],recheck_cached_metadata:[7,9,10,12],recommend:[10,16,302,303,304,305,317,329,343,406,408],recomput:405,record:[200,203,205,214],rectangular:[3,10,15],recurs:408,reduc:[16,301],redund:[398,408],refer:[0,1,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,94,193,210,293,326,332,406,408,409],reflect:[209,300,310,320,332,360],regardless:[7,8,9,10,12,406],region:[3,10,15,406,407],regist:[12,104,106,112],regular:[19,23,24,332,333,406,408],rel:[10,19,102,205,406,408],relat:[16,18,19,399,404],relationship:15,reli:409,relianc:17,remain:[9,12,15,94,101,193,207,293,342,349,406,408],remot:[0,13,14],remov:95,remove_done_callback:[104,112,360,368],reorder:102,replac:[193,293,406],repo:16,repositori:16,repres:[9,10,12,15,21,22,69,114,141,215,237,320,332,343,406,408,409],represent:[15,17,18,19,20,21,22,23,24,27,36,40,50,54,55,56,57,58,59,60,61,62,65,79,80,123,125,140,150,151,169,187,188,192,194,202,212,243,249,250,264,269,274,275,291,343,346,354,380,406,408,409],request:[18,19,104,107,209,355,356,398,405],requestor:18,requir:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,121,148,293,320,326,398,407,408,409],reserv:15,resiz:[9,10,12,15,69,86,87],resolut:[9,10,279,398,407,408],resolv:[105,114,206,209,214,295,322,406],resourc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,57,58,59,63,64,193,207,210,269,275,293,326,398,405,409],respect:[3,10,26,37,69,95,98,332,406],respons:19,restrict:[19,206],result:[9,10,11,12,14,15,16,22,94,95,96,103,104,105,110,111,113,114,116,144,147,170,172,180,181,193,200,201,203,206,209,210,237,239,240,244,266,270,293,294,297,298,300,302,303,304,305,317,320,326,328,329,332,333,340,341,360,369,398,405,406,407,408],retain:[26,37,102,210,326,406,408],retain_context:[172,210,326],retri:[18,19],retriev:[18,57,63,407],revalid:[7,8,9,10,12,19],revers:[102,141,142,241,242,267,268,295,296],rewrit:10,rfc:[8,19],right:[15,18,19,116,144],rightarrow:15,roll:333,root:17,round:[3,10,15,406],row:[39,44,51,320,408],rs1:17,rtf:16,rule:[15,16],run:[18,105,110,113,405],runtim:[13,18,19],rw:314,s:[9,11,13,16,22,392,393,394,395,406,409],safe:[14,17,18,332,398],same:[0,7,8,9,10,11,12,15,16,19,21,64,96,98,99,100,101,193,210,293,308,313,323,326,332,333,360,398,405,406,407,408],satisfi:[10,320,406],satur:14,save:13,scalar:[94,98,99,100,101,302,304,305,317,329,332,371,380,381,406],scale:[10,254],scale_index:[10,398,407],scale_metadata:[10,398,407],scheama:11,schema:[1,2,3,4,5,6,7,8,14,15,22,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,288,293,295,323,398,405,409],scheme:[17,18,19,20,21],script:16,sdist:16,sdk:18,se_curl:[13,16],second:[7,15,110,113,195,199,209],section:[13,14,18,19],secur:[13,18,19],segment:[398,407,408],sel:406,select:[1,2,3,4,5,6,7,8,11,22,85,90,93,94,95,96,98,99,100,101,102,115,119,127,133,254,376,377,409],self:[25,36,37,38,49,50,51,53,56,59,62,63,70,71,72,77,78,79,80,82,83,85,88,89,90,92,94,96,97,98,99,100,101,102,103,106,107,108,109,110,111,112,113,116,117,118,119,120,124,125,127,133,140,142,143,144,145,146,147,151,163,164,167,168,169,170,174,176,186,188,189,190,192,193,196,200,201,202,203,204,205,206,209,210,213,214,226,227,229,231,239,240,242,243,244,245,246,247,250,253,259,260,262,263,264,265,266,268,269,270,271,272,273,275,278,285,286,289,290,291,293,294,296,297,298,299,300,301,302,303,304,305,306,312,316,317,318,319,320,322,324,325,326,328,329,330,332,335,338,340,344,350,351,354,361,362,363,366,367,368,369,381,386],semant:[17,93,94,97,103,141,146,163,170,241,246,259,266,267,272,285,294,295,300,304,316,317,328,329,376,406],send:19,sensit:19,separ:[0,7,8,9,12,13,16,18,186,200,201,203,209,214,297,332,406,409],sequenc:[11,26,37,39,51,93,94,96,98,99,100,101,116,119,121,122,141,143,144,148,149,248,265,293,376,377,398,405,406],serial:15,serv:[10,116,144,254,405,408],server:[13,18,19],servic:18,set:[3,4,10,11,13,16,18,19,21,22,39,51,93,96,98,172,209,248,265,293,326,376,398,405,406],set_except:[237,239],set_result:[237,240],setup:[14,16],sever:[16,104],sha256:16,shape:[15,23,24,26,28,29,34,35,37,39,49,51,53,115,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,148,161,167,241,244,245,246,247,248,255,259,262,265,266,267,280,288,289,293,295,297,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,316,317,320,323,324,326,328,329,332,398,405,406,408],shape_soft_constraint:[24,26,35,37,39,50,51,408],shard:[398,407,408],shard_bit:[10,398,407],shard_data_encod:10,shardingspec:10,share:[0,13,14,17,18,19,22,57,64,193,207,210,293,326,398,405],shift:[93,99,100,376,406],shlex:16,shortcut:406,shorthand:[304,305],should:[7,8,9,10,12,13,16,18,19,20,21,105,332,358,359,405,408],show:16,shuffl:[9,12,295,298,299,300,301,308,316,323,326,328,398,408],sign:[15,22,392,393,394,395,409],signal:237,signific:332,silent:406,similar:[15,97,98,103,163,170,259,266,285,294,316,317,328,329,406],simpler:3,simplest:16,simpli:[95,105,139,360,405,406],simultan:[16,398],sinc:[7,15,94,110,113,132,195,199,209,405,406,407],singl:[8,9,10,12,13,15,22,94,102,115,118,172,200,201,203,206,209,214,215,218,248,254,265,275,293,309,343,389,398,405,406,407,408,409],single_input_dimens:[15,229,235],singleton:[22,95,397],size:[0,9,10,12,15,16,26,37,69,75,78,79,81,85,90,92,115,121,139,141,148,168,241,263,267,290,295,325,332,398,405,407,408],skip:[7,9,10,12,16,293,326,355,356,406],slice:[94,98,115,116,132,141,144,406,407],slightli:19,slower:[9,12],slowest:[9,12],small:[1,10],smallest:[3,10,12],snappi:[9,12,16],so:[16,407],soft:[0,1,2,3,4,5,6,7,8,9,10,11,12,23,24,26,29,31,35,37,39,43,44,45,49,51,53,408,409],sole:94,some:[9,15,333,343,398,408],sourc:[15,16,295,302,303,304,305,317,329,332,360,370],sp:19,space:[16,22,23,47,94,95,96,97,98,99,100,101,102,103,115,137,141,144,145,146,147,148,149,150,160,162,163,166,170,248,265,292,293,397,398,405,406,408],spec:[7,9,10,12,14,19,57,60,61,62,64,65,66,68,94,171,172,185,186,187,188,189,190,191,192,193,194,207,208,210,243,244,256,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,308,326,378,398],special:[0,10,15,16,18,19,22,82,83,88,89,94,175,178,391,406,408],specif:[0,1,2,3,4,5,6,7,8,9,11,12,16,17,18,19,20,21,22,54,57,60,61,172,185,193,194,195,198,210,212,267,276,277,279,280,282,288,293,326,343,398,408,409],specifi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,37,39,44,45,49,51,53,54,69,73,74,75,93,94,98,99,100,101,102,103,105,110,113,115,116,118,119,121,132,144,148,149,170,172,173,175,180,193,195,200,203,205,206,207,209,210,214,237,239,240,241,248,251,252,254,257,265,266,276,277,279,280,282,283,288,293,294,295,306,320,326,328,329,332,343,347,350,351,355,357,358,359,373,376,397,398,405,406,408,409],speed:4,split:16,squar:406,ssl:[13,16,18,19],sslkeylogfil:13,stack:[7,16,409],stage:[22,333],staic:11,stale:19,staleness_bound:[209,355,357],stamp:[172,180,181,182,207,209,214],standard:[12,16],start:[3,16,22,94,102,104,118,206,333,339,342,376,405,406],startup:16,state:[172,180,181,183,207,209,214],stderr:13,step:[15,94,332,406],still:[8,10,12,15,117,120,333,342,405,406],stop:[94,406],storag:[4,5,6,8,9,10,12,14,18,22,23,39,44,45,51,172,195,196,197,214,267,283,293,295,313,323,332,333,360,398,408],store2:398,store:[7,8,9,10,12,13,15,20,22,172,185,186,189,190,191,194,195,198,200,201,203,204,205,206,207,208,209,210,211,212,213,214,254,267,283,293,295,306,307,308,309,312,313,323,326,332,333,343,373,398,405,407,408],str:[22,57,63,69,73,74,75,76,79,80,91,93,96,115,118,121,125,134,141,148,151,158,172,173,175,178,179,181,185,186,188,189,191,194,195,197,200,201,202,203,208,209,212,214,229,231,234,241,248,250,265,267,275,293,295,314,343,345,348,349,352,376,380,383,384,386,398,404,405,406],strictli:[116,144],stride:[3,15,93,98,148,150,169,215,217,218,224,376],string:[0,3,7,8,9,10,12,14,15,17,18,19,20,21,22,79,80,91,125,151,173,175,178,179,188,198,202,250,275,306,343,349,399,404,408,409],strip:[206,349,408],strip_context:[193,293,326],strip_prefix:16,strip_prefix_length:206,strong:14,studio:16,style:[18,20,21,93,94,97,98,103,132,141,146,163,170,241,246,247,259,266,267,272,273,285,294,295,300,304,316,317,328,329,376],sub:[8,16,407],subarrai:12,subdivid:408,subject:[295,322,360],subscript:[302,303,304,305,317,329,406,407],subsequ:[11,94,332,360,398,405,406],subset:[15,16,104,115,119,406],subtyp:[7,9,12,20,408,409],succe:15,success:[113,201,338,340],successfulli:[110,237,240,332,341,360],suffic:15,suffici:406,suffix:[185,186],suitabl:[1,2,3,4,5,6,7,8,9,10,11,12,16,398,408,409],sum:406,suppli:407,support:[0,2,3,7,8,9,10,11,14,15,16,17,18,19,20,21,93,104,132,171,172,200,203,205,214,254,295,304,321,331,333,371,406,407,408,409],surviv:332,synchron:[104,200,201,203,295,297,302,303,304,305,317,320,329,332,333,340,405,407],syntax:[0,8,17,18,19,21,302,303,304,305,317,329,343,406,408],system:[13,16,18,19,20,332],t:[16,114,141,142,193,207,241,242,267,268,293,295,296,405],tabl:[15,21],take:[10,13,14,39,51,248,265,293,398,405,406,408],taken:[10,11,49,53,72,408],target:[15,24,26,30,31,37,39,51,93,102,376,406,408],temporari:[10,16],tensoprstor:13,tensorflow:[12,371],tensorstor:[0,1,2,3,4,5,6,7,8,13,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,399,400,401,402,403,404,405,406,407,408,409],tensorstore_bazel_build_opt:16,tensorstore_bazel_compilation_mod:16,tensorstore_bazel_startup_opt:16,tensorstore_bazelisk:16,tensorstore_ca_bundl:13,tensorstore_ca_path:13,tensorstore_curl_verbos:13,tensorstore_gcs_http_url:[13,18],tensorstore_gcs_request_concurr:[13,18],tensorstore_prebuilt_dir:16,tensorstore_system_lib:[13,16],term:[94,97,103,163,170,259,266,285,294,304,316,317,328,329,406],termin:[399,404],test:[21,104],th:[94,116,144,406],than:[0,7,8,9,10,12,15,16,39,44,45,51,94,119,209,355,357,405,406,408],thei:[9,11,21,62,117,120,399,404,405,406],them:332,therefor:[10,13],thi:[0,1,3,7,8,9,10,12,13,15,16,17,18,20,39,51,57,63,64,67,68,92,97,103,104,111,115,116,120,132,139,141,142,144,145,147,163,164,167,168,170,172,200,201,203,205,206,209,211,213,214,242,248,251,259,260,262,263,265,266,268,273,276,277,279,280,282,285,286,288,289,290,293,294,295,296,297,300,301,304,305,308,313,316,317,318,319,323,324,325,326,328,329,330,332,333,343,347,350,351,352,360,380,381,398,405,406,407,408],third:408,those:[104,301],though:[117,120,405],thread:[0,104,105,110,113,200,201,203,297,320,405],three:[10,15,116,144,408],through:[14,15,18,20,141],throughput:14,tie:3,time:[7,8,9,10,12,15,195,197,199,209,405,408],timedelta:12,timeout:[104,110,113,360,367,369],timeouterror:[110,113],timestamp:[172,180,182,195,196,405],timestampedstoragegener:[172,180,181,182,195,196,197,198,199,207,209,214,405],tl:16,tmp:[16,17,186,187,188,189,190,191,192,202,204,333,407],to_json:[23,24,36,50,54,56,58,59,60,62,67,115,140,141,169,185,192,241,264,267,291,343,354,380,386],togeth:12,tool:16,top:[2,407,408],total:[0,115,139,141,168,241,263,267,290,295,325],total_bytes_limit:[0,7,9,10,12,59,63,65,67,68,405,407],toward:406,traceback:[94,108,119,200,201,203,209,239,247,406],track:332,traffic:13,trail:[349,408],transact:[14,21,22,200,203,205,206,207,209,211,213,214,302,303,304,305,313,317,320,327,329,330,333,334,335,336,337,338,339,340,341,342,360,398],transform:[1,2,3,4,5,6,7,8,9,10,11,12,14,22,94,95,96,97,98,99,100,101,102,103,104,115,117,120,141,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,166,169,170,215,216,217,218,225,241,244,245,246,247,248,259,265,266,267,270,271,272,273,285,291,292,293,294,295,298,299,300,301,302,303,305,306,310,316,326,328,373,397,398,405,407,409],translat:[3,9,12,15,93,99,100,101,376,406],translate_backward_bi:[93,99,376],translate_bi:[93,94,96,100,117,143,145,291,292,376],translate_to:[93,101,376],transpos:[93,95,102,141,142,241,242,267,268,295,296,376],treat:[19,105,209,406,408],treatment:19,tree:16,trip:15,truncat:406,trust:13,ts:[9,10,11,12,46,47,49,50,53,59,63,64,65,67,68,69,70,71,72,73,74,75,76,77,79,80,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,108,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,166,169,170,172,177,186,187,188,189,190,191,192,193,194,200,201,202,203,204,205,206,207,208,209,210,212,213,214,216,217,218,237,239,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,261,264,265,266,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,315,316,317,319,320,323,326,328,329,332,333,344,345,346,347,348,349,350,351,352,353,354,373,377,391,397,398,405,406,407],tupl:[23,24,28,29,34,35,42,43,44,45,115,126,128,129,130,131,132,134,136,138,141,143,153,154,155,156,157,158,159,161,164,167,237,238,241,248,254,260,262,265,267,279,286,289,293,295,309,318,324,343,348,398,405,406],turbo:16,tutori:14,two:[8,15,22,23,24,25,38,195,196,332,333,343,344,360,392,393,394,395,406,408,409],txn:[172,213,304,332,333],type:[0,1,2,3,7,8,11,14,63,104,114,141,171,241,248,256,265,267,281,293,298,299,302,304,305,306,311,312,317,329,332,333,343,370,371,372,373,380,381,382,387,388,389,390,392,393,394,395,396,398,399,402,404,405,406,407,408,409],u1:12,u2:[12,280,288],u4:[295,300,301,316,326,328],u8:12,u:[352,353],udunits2:[343,408],uint16:[9,10,12,22,278,288,333,400,409],uint32:[9,10,12,22,104,295,297,298,299,300,301,302,303,304,305,306,308,309,310,311,312,313,316,317,320,323,326,328,329,332,373,401,405,407,409],uint64:[9,10,12,22,398,402,407,409],uint8:[4,5,6,9,10,12,22,248,249,250,253,256,261,264,265,278,281,403,409],um:279,unbind_context:[185,193,210,293,326],unbound:[11,15,22,49,53,69,76,82,83,88,89,92,121,148,193,293,391],unchang:[98,99,100,101,193,207,293,406],unchunk:10,uncommit:[320,332,333],uncondition:[103,170,266,294,328,329,406],unconstrain:[254,398],under:[2,7,12,17,406],underli:[4,5,6,7,8,9,10,11,12,14,15,20,141,267,283,293,295,313,332,333,360,398,408],unequ:406,unicod:[22,404,409],uniform:[3,14,408],uniqu:[15,64,405],unit:[11,22,241,248,254,265,267,279,293,295,309,343,344,345,346,347,348,349,350,351,352,353,354,398,405],unix:[7,18,20,21,110,113,195,199,209],unknown:[15,248,254,265,293,308,309,312,398,405,408],unlabel:[9,15,69,91,121,148,408],unless:[10,18,343,406,408],unlik:[19,94,104,406],unmatch:15,unmodifi:405,unpickl:405,unregist:[104,112],unset:11,unshar:[398,405],unshard:408,unsign:[22,400,401,402,403,409],unspecifi:[3,7,9,10,12,15,24,33,39,49,51,53,180,181,183,198,206,209,241,255,256,261,267,281,287,292,293,326,398,405,406,408],unsuccessfulli:[107,113,237,239],until:[104,110,113,200,201,203,205,214,333,342,360,405,406],unus:[4,5,6],unverifi:398,up:[10,16,18,408],updat:[10,23,24,37,51,185,193,241,243,251,252,253,254,255,257,261,265,267,269,275,278,293,295,322,326,398],upon:[104,106,406],upper:[9,12,15,69,73,74,75,76,82,87,88,95,115,121,126,129,130,132,141,148,154,155,156,173,175,178,406],url:[14,16,17,18,19,20,21,172,185,187,194,207,212],us:[0,1,3,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,41,63,64,69,93,94,98,99,100,101,104,105,111,114,115,117,120,132,141,172,186,193,207,209,210,213,237,241,244,245,246,247,259,266,267,270,271,272,273,283,285,293,294,295,298,299,300,301,302,303,304,305,308,313,316,317,320,323,326,327,328,329,330,332,333,338,342,343,349,355,358,360,370,376,396,397,399,404,405,406,407,408],usag:333,user:17,usezlib:[9,408],ustr:[22,404,409],usual:[175,179,406],utf:409,util:16,v1:[15,398,407],v2:15,v3:15,v4:15,valid:[0,9,15,19,39,51,94,98,195,199,209,406,408],valu:[0,1,3,4,7,8,11,13,14,15,22,39,51,62,69,72,82,83,88,89,92,94,98,104,114,119,172,180,181,182,183,184,185,186,189,190,191,193,194,195,198,200,201,203,204,205,206,207,208,209,210,211,212,213,214,229,230,236,241,248,254,257,265,267,282,283,293,295,309,312,313,326,332,343,347,396,398,405,406,407,408,409],valueerror:[49,53,77,119,132,206,244,245,246,247,259,266,270,271,272,273,285,294],variabl:[16,18,19,22,399,404],varieti:20,varlength:9,vector:[15,93,94,103,115,121,141,143,148,170,241,266,267,294,295,328,329,376],verbos:[13,406],veri:[10,117,120],verifi:[18,19],version:[3,13,16,195,198,398,405,406],via:[1,3,9,10,11,12,14,44,45,406],view:[2,3,14,141,142,172,213,225,241,242,267,268,295,296,298,299,300,301,306,316,328,330,373,378,379,405,406,407],vindex:[93,94,103,141,146,170,241,246,247,259,266,267,272,273,285,294,295,300,301,304,305,316,317,328,329,376],virtual:[2,3,14,16,141,295,298,299,300,301,316,328,378,379,405],virtual_chunk:[22,355,358,405],virtualchunkedreadparamet:[22,355,356,357,405],virtualchunkedwriteparamet:[22,358,359,405],visibl:333,visual:16,volum:10,voxel:[10,408],voxel_offset:[10,398,407],vv:16,w:[15,314],wa:[7,13,57,68,110,113,207,209,251,338,398,405,407],wai:[0,9,10,12,14,16,405,408],wait:[104,332,405,407],warn:[7,9,10,12],web:19,well:[10,11,12,94,371,398],were:406,what:7,wheel:16,when:[0,1,2,3,4,5,6,7,8,11,15,16,19,94,105,111,205,209,254,293,302,303,304,305,317,320,326,329,332,341,360,405,406,408,409],where:[0,3,10,11,13,15,22,94,97,103,114,116,132,144,146,148,150,163,170,248,265,293,398,405,406,408,409],wherebi:406,whether:[62,73,74,75,76,94,104,108,109,115,121,128,129,141,148,153,154,326,333,336,337,339,342,406],which:[0,2,3,7,8,9,10,11,12,13,14,15,16,18,19,21,49,53,57,65,66,67,68,69,98,99,100,101,105,115,141,195,199,209,251,301,332,338,343,352,360,370,376,405,406,407,408],whitespac:[349,408],wide:17,window:[13,16,17],wireshark:13,wise:[2,9,12,22,405],wish:405,with_transact:[172,207,213,295,304,330,332,333,398,405],within:[0,3,7,8,9,10,12,15,18,20,21,23,39,44,51,110,113,172,185,191,206,208,209,295,320,405,406,408],without:[9,15,18,19,93,99,100,101,186,200,201,203,207,209,214,332,333,376,398,405,406,407,408],won:[193,207,293],work:[16,18,19],workspac:16,worst:[9,10],would:[96,132],writabl:[295,331],write:[2,7,8,9,11,12,14,15,18,22,23,24,39,51,52,53,172,200,203,205,207,209,213,214,295,301,302,303,304,305,306,314,317,320,327,329,330,331,332,333,358,360,370,373,405,406,408],write_chunk:[9,10,12,23,39,50,51,52,53,288,307,323,408],write_chunk_aspect_ratio:[39,51],write_chunk_aspect_ratio_soft_constraint:[39,51],write_chunk_el:[10,39,51],write_chunk_elements_soft_constraint:[39,51],write_chunk_shap:[10,39,51,53],write_chunk_shape_soft_constraint:[39,50,51],write_chunk_templ:[23,49,53],write_context:405,write_funct:405,write_futur:407,writeback:[0,14,332,358,359],writefutur:[22,104,295,332,360,361,362,363,364,365,366,367,368,369],writer:[7,9,10,12,293,326,398],written:[12,16,22,248,265,293,295,312,332,398,405,407],x:[9,10,12,15,16,69,73,74,75,76,79,80,85,90,91,94,95,96,97,98,99,100,101,102,103,105,116,117,118,119,123,127,133,134,144,145,147,150,152,158,160,162,166,169,177,207,244,245,246,247,255,259,266,270,271,292,298,299,302,303,310,377,398,406,407],xcode:16,xre:10,xxxxx:19,xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:16,xyz:10,xz:[9,16],y:[9,10,12,15,94,95,96,97,98,99,100,101,102,103,116,117,118,119,122,123,127,133,134,144,145,150,152,158,160,162,166,169,177,207,244,245,246,247,255,259,266,270,271,292,298,299,302,303,310,398,406,407],yet:[295,312,320],you:[7,9,10,12,13,16,18,19,64,332,398,405,407],your:16,yre:10,yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyi:16,z:[9,10,15,94,96,97,98,99,100,101,102,103,116,117,118,119,123,134,144,150,152,158,160,162,166,169,244,245,246,247,255,259,266,270,271,298,299,302,303,398,406,407],zarr:[2,3,7,14,252,270,271,272,273,276,277,280,282,285,288,294,295,297,300,301,304,305,307,308,311,312,316,317,320,323,326,328,329,332,398,406,408],zarr_format:[12,295,300,301,316,326,328,398],zarrai:[12,398],zero:[7,9,10,12,15,69,81,94,95,121,148,248,265,293,398,405,406,408],zlib:[9,12,16],zre:10,zstd:[9,12,16]},titles:["Context framework","<code class=\"docutils literal notranslate\"><span class=\"pre\">array</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">cast</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">downsample</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">avif</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">jpeg</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">png</span></code> Driver","Drivers","<code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">n5</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">neuroglancer_precomputed</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">stack</span></code> Driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">zarr</span></code> Driver","Environment variables","TensorStore","Index space","Building and Installing","<code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">gcs</span></code> Key-Value Store driver","<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> Key-Value Store driver","Key-Value Storage Layer","<code class=\"docutils literal notranslate\"><span class=\"pre\">memory</span></code> Key-Value Store driver","API reference","tensorstore.ChunkLayout","tensorstore.ChunkLayout.Grid","tensorstore.ChunkLayout.Grid.__eq__","tensorstore.ChunkLayout.Grid.__init__(components)","tensorstore.ChunkLayout.Grid.__init__(json)","tensorstore.ChunkLayout.Grid.aspect_ratio","tensorstore.ChunkLayout.Grid.aspect_ratio_soft_constraint","tensorstore.ChunkLayout.Grid.elements","tensorstore.ChunkLayout.Grid.elements_soft_constraint","tensorstore.ChunkLayout.Grid.ndim","tensorstore.ChunkLayout.Grid.rank","tensorstore.ChunkLayout.Grid.shape","tensorstore.ChunkLayout.Grid.shape_soft_constraint","tensorstore.ChunkLayout.Grid.to_json","tensorstore.ChunkLayout.Grid.update","tensorstore.ChunkLayout.__eq__","tensorstore.ChunkLayout.__init__(components)","tensorstore.ChunkLayout.__init__(json)","tensorstore.ChunkLayout.codec_chunk","tensorstore.ChunkLayout.grid_origin","tensorstore.ChunkLayout.grid_origin_soft_constraint","tensorstore.ChunkLayout.inner_order","tensorstore.ChunkLayout.inner_order_soft_constraint","tensorstore.ChunkLayout.ndim","tensorstore.ChunkLayout.rank","tensorstore.ChunkLayout.read_chunk","tensorstore.ChunkLayout.read_chunk_template","tensorstore.ChunkLayout.to_json","tensorstore.ChunkLayout.update","tensorstore.ChunkLayout.write_chunk","tensorstore.ChunkLayout.write_chunk_template","tensorstore.CodecSpec","tensorstore.CodecSpec.__init__","tensorstore.CodecSpec.to_json","tensorstore.Context","tensorstore.Context.Resource","tensorstore.Context.Resource.to_json","tensorstore.Context.Spec","tensorstore.Context.Spec.__init__","tensorstore.Context.Spec.to_json","tensorstore.Context.__getitem__","tensorstore.Context.__init__(default)","tensorstore.Context.__init__(json)","tensorstore.Context.__init__(spec)","tensorstore.Context.parent","tensorstore.Context.spec","tensorstore.Dim","tensorstore.Dim.__contains__(dim)","tensorstore.Dim.__contains__(index)","tensorstore.Dim.__eq__","tensorstore.Dim.__init__(exclusive_max)","tensorstore.Dim.__init__(inclusive_max)","tensorstore.Dim.__init__(size)","tensorstore.Dim.__init__(unbounded)","tensorstore.Dim.__iter__","tensorstore.Dim.__len__","tensorstore.Dim.__repr__","tensorstore.Dim.__str__","tensorstore.Dim.empty","tensorstore.Dim.exclusive_max","tensorstore.Dim.exclusive_min","tensorstore.Dim.finite","tensorstore.Dim.hull","tensorstore.Dim.implicit_lower","tensorstore.Dim.implicit_upper","tensorstore.Dim.inclusive_max","tensorstore.Dim.inclusive_min","tensorstore.Dim.intersect","tensorstore.Dim.label","tensorstore.Dim.size","tensorstore.DimExpression","tensorstore.DimExpression.__getitem__","tensorstore.DimExpression.diagonal","tensorstore.DimExpression.label","tensorstore.DimExpression.oindex","tensorstore.DimExpression.stride","tensorstore.DimExpression.translate_backward_by","tensorstore.DimExpression.translate_by","tensorstore.DimExpression.translate_to","tensorstore.DimExpression.transpose","tensorstore.DimExpression.vindex","tensorstore.Future","tensorstore.Future.__new__","tensorstore.Future.add_done_callback","tensorstore.Future.cancel","tensorstore.Future.cancelled","tensorstore.Future.done","tensorstore.Future.exception","tensorstore.Future.force","tensorstore.Future.remove_done_callback","tensorstore.Future.result","tensorstore.FutureLike","tensorstore.IndexDomain","tensorstore.IndexDomain.__getitem__(domain)","tensorstore.IndexDomain.__getitem__(expr)","tensorstore.IndexDomain.__getitem__(identifier)","tensorstore.IndexDomain.__getitem__(selection)","tensorstore.IndexDomain.__getitem__(transform)","tensorstore.IndexDomain.__init__(components)","tensorstore.IndexDomain.__init__(dimensions)","tensorstore.IndexDomain.__init__(json)","tensorstore.IndexDomain.__len__","tensorstore.IndexDomain.__repr__","tensorstore.IndexDomain.exclusive_max","tensorstore.IndexDomain.hull","tensorstore.IndexDomain.implicit_lower_bounds","tensorstore.IndexDomain.implicit_upper_bounds","tensorstore.IndexDomain.inclusive_max","tensorstore.IndexDomain.inclusive_min","tensorstore.IndexDomain.index_exp","tensorstore.IndexDomain.intersect","tensorstore.IndexDomain.labels","tensorstore.IndexDomain.ndim","tensorstore.IndexDomain.origin","tensorstore.IndexDomain.rank","tensorstore.IndexDomain.shape","tensorstore.IndexDomain.size","tensorstore.IndexDomain.to_json","tensorstore.IndexTransform","tensorstore.IndexTransform.T","tensorstore.IndexTransform.__call__","tensorstore.IndexTransform.__getitem__(domain)","tensorstore.IndexTransform.__getitem__(expr)","tensorstore.IndexTransform.__getitem__(indices)","tensorstore.IndexTransform.__getitem__(transform)","tensorstore.IndexTransform.__init__(components)","tensorstore.IndexTransform.__init__(domain)","tensorstore.IndexTransform.__init__(json)","tensorstore.IndexTransform.__repr__","tensorstore.IndexTransform.domain","tensorstore.IndexTransform.implicit_lower_bounds","tensorstore.IndexTransform.implicit_upper_bounds","tensorstore.IndexTransform.input_exclusive_max","tensorstore.IndexTransform.input_inclusive_max","tensorstore.IndexTransform.input_inclusive_min","tensorstore.IndexTransform.input_labels","tensorstore.IndexTransform.input_origin","tensorstore.IndexTransform.input_rank","tensorstore.IndexTransform.input_shape","tensorstore.IndexTransform.ndim","tensorstore.IndexTransform.oindex","tensorstore.IndexTransform.origin","tensorstore.IndexTransform.output","tensorstore.IndexTransform.output_rank","tensorstore.IndexTransform.shape","tensorstore.IndexTransform.size","tensorstore.IndexTransform.to_json","tensorstore.IndexTransform.vindex","tensorstore.Indexable","tensorstore.KvStore","tensorstore.KvStore.KeyRange","tensorstore.KvStore.KeyRange.__eq__","tensorstore.KvStore.KeyRange.__init__","tensorstore.KvStore.KeyRange.copy","tensorstore.KvStore.KeyRange.empty","tensorstore.KvStore.KeyRange.exclusive_max","tensorstore.KvStore.KeyRange.inclusive_min","tensorstore.KvStore.ReadResult","tensorstore.KvStore.ReadResult.__init__","tensorstore.KvStore.ReadResult.stamp","tensorstore.KvStore.ReadResult.state","tensorstore.KvStore.ReadResult.value","tensorstore.KvStore.Spec","tensorstore.KvStore.Spec.__add__","tensorstore.KvStore.Spec.__new__","tensorstore.KvStore.Spec.__repr__","tensorstore.KvStore.Spec.__truediv__","tensorstore.KvStore.Spec.copy","tensorstore.KvStore.Spec.path","tensorstore.KvStore.Spec.to_json","tensorstore.KvStore.Spec.update","tensorstore.KvStore.Spec.url","tensorstore.KvStore.TimestampedStorageGeneration","tensorstore.KvStore.TimestampedStorageGeneration.__eq__","tensorstore.KvStore.TimestampedStorageGeneration.__init__","tensorstore.KvStore.TimestampedStorageGeneration.generation","tensorstore.KvStore.TimestampedStorageGeneration.time","tensorstore.KvStore.__delitem__","tensorstore.KvStore.__getitem__","tensorstore.KvStore.__repr__","tensorstore.KvStore.__setitem__","tensorstore.KvStore.copy","tensorstore.KvStore.delete_range","tensorstore.KvStore.list","tensorstore.KvStore.open","tensorstore.KvStore.path","tensorstore.KvStore.read","tensorstore.KvStore.spec","tensorstore.KvStore.transaction","tensorstore.KvStore.url","tensorstore.KvStore.with_transaction","tensorstore.KvStore.write","tensorstore.OutputIndexMap","tensorstore.OutputIndexMap.__init__(constant)","tensorstore.OutputIndexMap.__init__(index_array)","tensorstore.OutputIndexMap.__init__(input_dimension)","tensorstore.OutputIndexMap.index_array","tensorstore.OutputIndexMap.index_range","tensorstore.OutputIndexMap.input_dimension","tensorstore.OutputIndexMap.method","tensorstore.OutputIndexMap.offset","tensorstore.OutputIndexMap.stride","tensorstore.OutputIndexMaps","tensorstore.OutputIndexMaps.__getitem__","tensorstore.OutputIndexMaps.__len__","tensorstore.OutputIndexMaps.rank","tensorstore.OutputIndexMethod","tensorstore.OutputIndexMethod.__init__","tensorstore.OutputIndexMethod.__str__","tensorstore.OutputIndexMethod.array","tensorstore.OutputIndexMethod.constant","tensorstore.OutputIndexMethod.name","tensorstore.OutputIndexMethod.single_input_dimension","tensorstore.OutputIndexMethod.value","tensorstore.Promise","tensorstore.Promise.new","tensorstore.Promise.set_exception","tensorstore.Promise.set_result","tensorstore.Schema","tensorstore.Schema.T","tensorstore.Schema.__eq__","tensorstore.Schema.__getitem__(domain)","tensorstore.Schema.__getitem__(expr)","tensorstore.Schema.__getitem__(indices)","tensorstore.Schema.__getitem__(transform)","tensorstore.Schema.__init__(components)","tensorstore.Schema.__init__(json)","tensorstore.Schema.__repr__","tensorstore.Schema.chunk_layout","tensorstore.Schema.codec","tensorstore.Schema.copy","tensorstore.Schema.dimension_units","tensorstore.Schema.domain","tensorstore.Schema.dtype","tensorstore.Schema.fill_value","tensorstore.Schema.ndim","tensorstore.Schema.oindex","tensorstore.Schema.origin","tensorstore.Schema.rank","tensorstore.Schema.shape","tensorstore.Schema.size","tensorstore.Schema.to_json","tensorstore.Schema.update","tensorstore.Schema.vindex","tensorstore.Spec","tensorstore.Spec.T","tensorstore.Spec.__eq__","tensorstore.Spec.__getitem__(domain)","tensorstore.Spec.__getitem__(expr)","tensorstore.Spec.__getitem__(indices)","tensorstore.Spec.__getitem__(transform)","tensorstore.Spec.__new__","tensorstore.Spec.__repr__","tensorstore.Spec.chunk_layout","tensorstore.Spec.codec","tensorstore.Spec.copy","tensorstore.Spec.dimension_units","tensorstore.Spec.domain","tensorstore.Spec.dtype","tensorstore.Spec.fill_value","tensorstore.Spec.kvstore","tensorstore.Spec.ndim","tensorstore.Spec.oindex","tensorstore.Spec.origin","tensorstore.Spec.rank","tensorstore.Spec.schema","tensorstore.Spec.shape","tensorstore.Spec.size","tensorstore.Spec.to_json","tensorstore.Spec.transform","tensorstore.Spec.update","tensorstore.Spec.vindex","tensorstore.TensorStore","tensorstore.TensorStore.T","tensorstore.TensorStore.__array__","tensorstore.TensorStore.__getitem__(domain)","tensorstore.TensorStore.__getitem__(expr)","tensorstore.TensorStore.__getitem__(indices)","tensorstore.TensorStore.__getitem__(transform)","tensorstore.TensorStore.__setitem__(domain)","tensorstore.TensorStore.__setitem__(expr)","tensorstore.TensorStore.__setitem__(indices)","tensorstore.TensorStore.__setitem__(transform)","tensorstore.TensorStore.astype","tensorstore.TensorStore.chunk_layout","tensorstore.TensorStore.codec","tensorstore.TensorStore.dimension_units","tensorstore.TensorStore.domain","tensorstore.TensorStore.dtype","tensorstore.TensorStore.fill_value","tensorstore.TensorStore.kvstore","tensorstore.TensorStore.mode","tensorstore.TensorStore.ndim","tensorstore.TensorStore.oindex","tensorstore.TensorStore.oindex.__setitem__","tensorstore.TensorStore.origin","tensorstore.TensorStore.rank","tensorstore.TensorStore.read","tensorstore.TensorStore.readable","tensorstore.TensorStore.resolve","tensorstore.TensorStore.schema","tensorstore.TensorStore.shape","tensorstore.TensorStore.size","tensorstore.TensorStore.spec","tensorstore.TensorStore.transaction","tensorstore.TensorStore.vindex","tensorstore.TensorStore.vindex.__setitem__","tensorstore.TensorStore.with_transaction","tensorstore.TensorStore.writable","tensorstore.TensorStore.write","tensorstore.Transaction","tensorstore.Transaction.__init__","tensorstore.Transaction.abort","tensorstore.Transaction.aborted","tensorstore.Transaction.atomic","tensorstore.Transaction.commit_async","tensorstore.Transaction.commit_started","tensorstore.Transaction.commit_sync","tensorstore.Transaction.future","tensorstore.Transaction.open","tensorstore.Unit","tensorstore.Unit.__eq__","tensorstore.Unit.__init__(components)","tensorstore.Unit.__init__(json)","tensorstore.Unit.__init__(multiplier)","tensorstore.Unit.__init__(pair)","tensorstore.Unit.__init__(unit)","tensorstore.Unit.__mul__","tensorstore.Unit.__truediv__","tensorstore.Unit.base_unit","tensorstore.Unit.multiplier","tensorstore.Unit.to_json","tensorstore.VirtualChunkedReadParameters","tensorstore.VirtualChunkedReadParameters.if_not_equal","tensorstore.VirtualChunkedReadParameters.staleness_bound","tensorstore.VirtualChunkedWriteParameters","tensorstore.VirtualChunkedWriteParameters.if_equal","tensorstore.WriteFutures","tensorstore.WriteFutures.add_done_callback","tensorstore.WriteFutures.cancel","tensorstore.WriteFutures.cancelled","tensorstore.WriteFutures.commit","tensorstore.WriteFutures.copy","tensorstore.WriteFutures.done","tensorstore.WriteFutures.exception","tensorstore.WriteFutures.remove_done_callback","tensorstore.WriteFutures.result","tensorstore.array","tensorstore.bfloat16","tensorstore.bool","tensorstore.cast","tensorstore.complex128","tensorstore.complex64","tensorstore.d","tensorstore.d.__class_getitem__","tensorstore.downsample(spec)","tensorstore.downsample(store)","tensorstore.dtype","tensorstore.dtype.__call__","tensorstore.dtype.__init__(dtype)","tensorstore.dtype.__init__(name)","tensorstore.dtype.name","tensorstore.dtype.numpy_dtype","tensorstore.dtype.to_json","tensorstore.dtype.type","tensorstore.float16","tensorstore.float32","tensorstore.float64","tensorstore.inf","tensorstore.int16","tensorstore.int32","tensorstore.int64","tensorstore.int8","tensorstore.json","tensorstore.newaxis","tensorstore.open","tensorstore.string","tensorstore.uint16","tensorstore.uint32","tensorstore.uint64","tensorstore.uint8","tensorstore.ustring","tensorstore.virtual_chunked","Indexing","Tutorial","Schema","JSON Spec"],titleterms:{"boolean":[94,406],"class":[23,57,172,408],"new":[9,10,12,398],"public":[24,54,69,104,180,215,225,229,237,355,358,360,380],accessor:[23,57,58,60,69,104,115,141,172,173,185,195,241,267,295,333,343],ad:[94,406],align:15,all:[116,144],an:398,api:[16,22],arithmet:343,arrai:[1,9,10,12,94,398,406],aspect:[9,12],assume_metadata:398,asynchron:22,authent:18,avif:4,behavior:19,block:104,broadcast:15,build:16,c:[12,16],ca:[13,18,19],cach:[19,405],callback:104,cast:2,certif:[13,18,19],checkout:16,chunk:[7,9,10,12,23,408],cloud:13,codec:[9,10,12,408],compar:406,comparison:[23,24,173,195,241,267,343],compos:406,compress:[9,10],compressor:12,concept:14,concurr:398,configur:13,constraint:[9,10,12],construct:406,constructor:[23,24,54,57,60,69,104,115,141,172,173,180,185,195,215,229,237,241,267,333,343,376,380],context:0,core:22,creat:[9,10,12,398],credenti:13,data:[9,10,12,22,295],dataset:407,debug:13,depend:16,develop:16,diagon:406,differ:406,dimens:[9,10,94,116,144,406,408],document:16,domain:[9,10,12,15],downsampl:3,driver:[1,2,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21],effici:398,element:[9,12],ellipsi:[94,406],encod:10,environ:13,error:94,exampl:[0,1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,21,46,47,49,50,53,59,63,64,65,67,68,69,70,71,73,74,75,76,77,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,100,101,103,105,108,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,166,169,170,172,177,186,188,189,190,191,192,193,194,200,201,202,203,204,205,206,208,209,210,212,213,214,216,217,218,239,240,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,261,264,265,266,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,315,319,320,323,326,332,344,345,346,347,348,349,350,351,352,353,354,373,377,391,397,398,406,408],exist:398,explicit:[9,10,12],express:406,file:[7,17],fill:[9,10,12],flyem:407,fortran:12,framework:0,from:16,fulli:[116,144],gc:18,geometr:115,get:14,googl:13,hemibrain:407,highlight:14,http:[13,19],i:[172,295],improv:398,index:[15,22,94,115,141,241,267,295,406],instal:16,integ:[94,406],interfac:104,interv:[94,406],ipython:16,janelia:407,jpeg:5,json:[8,10,409],kei:[17,18,19,20,21],label:[116,144,406],layer:[11,20],layout:[9,10,12,408],librari:16,limit:[9,10,12,17],local:[16,407],map:[9,10,12],member:[24,54,69,104,180,215,225,229,237,355,358,360,380],memori:21,metadata:398,method:15,mix:[116,144],mode:406,mutat:[185,241,267],n5:[9,407],neuroglancer_precomput:10,non:332,numpi:406,o:[172,295],oindex:406,open:398,oper:[23,24,69,93,115,173,185,195,241,267,333,343,376,406],order:12,outer:406,output:15,packag:16,parti:16,pickl:405,png:6,proxi:13,publish:16,pypi:16,python:16,ratio:[9,12],raw:10,read:[10,398,407],refer:22,represent:[69,115,141,172,185,229,241,267],request:13,requir:16,run:16,scalar:12,schema:[9,10,11,12,408],segment:10,select:[9,10,12,406],semant:332,separ:10,sequenc:115,setter:23,shape:[9,10,12],shard:10,shell:16,singl:7,singleton:[94,406],skip:398,space:15,spec:[22,409],specif:10,stack:11,start:14,storag:[7,13,20],store:[17,18,19,21],stride:406,string:[69,115,141,172,185,229,241,267],structur:12,style:406,support:[12,22,405],synchron:172,templat:23,tensorstor:[9,10,11,12,14,398],test:[16,18],third:16,tl:[13,18,19],transact:[172,295,332,405],transform:[15,406],translate_backward_bi:406,translate_bi:406,translate_to:406,transpos:406,tutori:407,type:[9,10,12,22,295],unconstrain:[9,10,12],unit:[9,10,408],unlabel:[116,144],unshard:10,us:398,valu:[9,10,12,17,18,19,20,21],variabl:13,vector:406,view:22,vindex:406,virtual:22,when:[9,10,12,398],without:16,write:[10,398,407],zarr:12}})